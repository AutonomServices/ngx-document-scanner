{"version":3,"sources":["ng://ngx-document-scanner/lib/services/ngx-open-cv.service.ts","node_modules/tslib/tslib.es6.js","ng://ngx-document-scanner/lib/services/limits.service.ts","ng://ngx-document-scanner/lib/components/draggable-point/ngx-draggable-point.component.ts","ng://ngx-document-scanner/lib/components/filter-menu/ngx-filter-menu.component.ts","ng://ngx-document-scanner/lib/components/shape-outline/ngx-shape-outline.component.ts","ng://ngx-document-scanner/lib/components/image-editor/ngx-doc-scanner.component.ts","ng://ngx-document-scanner/lib/ngx-document-scanner.module.ts"],"names":["OpenCvConfigToken","InjectionToken","NgxOpenCvService","options","_ngZone","this","cvState","BehaviorSubject","ready","error","loading","state","configModule","generateConfigModule","loadOpenCv","prototype","_this","next","newState","window","script","document","createElement","setAttribute","addEventListener","err","Error","scriptUrl","passive","src","node","getElementsByTagName","parentNode","insertBefore","head","appendChild","change","newStateObj","Object","keys","forEach","key","openCvDirPath","wasmBinaryFile","usingWasm","onRuntimeInitialized","run","console","log","runOnOpenCVInit","Injectable","args","providedIn","Inject","NgZone","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__read","o","m","r","i","ar","__spread","arguments","concat","LimitsService","limitDirections","_limits","top","bottom","right","left","_points","positions","Array","from","repositionEvent","limits","paneDimensions","width","height","setPaneDimensions","dimensions","_paneDimensions","repositionPoints","position","positionChange","positionChangeData","updatePosition","direction","limit","relevantPoints","filter","point","roles","includes","map","getDirectionAxis","Math","max","min","index","findIndex","compareArray","splice","exceedsLimit","pointLimits","limitException","exceeds","resetCoefficients","x","resetCoordinates","directionAxis","rotateClockwise","resizeRatios","initialPreviewDimensions","initialPositions","PositionChangeData","rotateCornerClockwise","corner","rotated","order","array1","array2","every","element","NgxDraggablePointComponent","limitsService","color","shape","pointOptions","ngAfterViewInit","subscribe","getInitialPosition","limitRoles","externalReposition","pointStyle","background-color","border-radius","resetPosition","_currentPosition","adjustPosition","newPosition","startPosition","axis","movementEnd","enforcePaneLimits","Component","selector","template","Input","NgxFilterMenuComponent","bottomSheetRef","data","filterOptions","name","icon","action","filterSelected","emit","text","EventEmitter","selectOption","optionName","dismiss","MatBottomSheetRef","MAT_BOTTOM_SHEET_DATA","Output","NgxShapeOutlineComponent","canvas","nativeElement","sortPoints","clearCanvas","drawShape","setTimeout","getContext","clearRect","sortedPoints","sortOrder","vertical","horizontal","_sortedPoints","ctx","lineWidth","weight","strokeStyle","beginPath","moveTo","nextPoint","lineTo","closePath","stroke","ViewChild","NgxDocScannerComponent","ngxOpenCv","bottomSheet","editorButtons","exitEditor","type","mode","rotateImage","bind","transform","_a","applyFilter","loadFile","originalImage","chooseFilters","exportImage","imageLoaded","selectedFilter","imageDimensions","editResult","processing","screenDimensions","innerWidth","innerHeight","points","defineProperty","button","file","ngOnInit","ImageEditorConfig","config","exportImageIcon","maxPreviewWidth","editorStyle","exit","maxImageDimensions","resize","resizeResult","toBlob","blob","editedImage","open","afterDismissed","readImage","err_1","showPreview","err_2","previewDimensions","detectContours","readFile","reader","FileReader","onload","event","onerror","readAsDataURL","imageSrc","err_3","img","Image","drawImage","setPreviewPaneDimensions","cv","imread","dst","Mat","transpose","flip","imshow","delete","assign","previewResizeRatios","ksize","Size","rows","cols","cvtColor","COLOR_RGBA2GRAY","GaussianBlur","BORDER_DEFAULT","Canny","threshold","THRESH_BINARY","contours","MatVector","hierarchy","findContours","RETR_CCOMP","CHAIN_APPROX_SIMPLE","rect","boundingRect","imageResizeRatio","contourCoordinates","sourceCoordinates","getPoint","bottomWidth","topWidth","maxWidth","leftHeight","rightHeight","maxHeight","destCoordinates","Ms","matFromArray","CV_32FC2","Md","transformMatrix","getPerspectiveTransform","dsize","warpPerspective","INTER_LINEAR","BORDER_CONSTANT","Scalar","preview","blur","th","thMode","ADAPTIVE_THRESH_MEAN_C","thMeanCorrection","thBlockSize","thMax","grayScale","ADAPTIVE_THRESH_GAUSSIAN_C","adaptiveThreshold","convertTo","image","currentDimensions","size","resizeDimensions","floor","INTER_AREA","previewCanvas","calculateDimensions","imageDivStyle","cropToolDimensions","margin-left","margin-right","ratio","calculated","round","find","MatBottomSheet","read","ElementRef","editorBackgroundColor","editorDimensions","extraCss","buttonThemeColor","cropToolColor","cropToolShape","cropToolLineWeight","NgxDocumentScannerModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","imports","FlexLayoutModule","MatButtonModule","MatIconModule","MatBottomSheetModule","MatListModule","AngularDraggableModule","CommonModule","exports","entryComponents"],"mappings":"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","sourcesContent":["import {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {OpenCvConfig, OpenCvState} from '../PublicModels';\n\nexport const OpenCvConfigToken = new InjectionToken<OpenCvConfig>('OpenCV config object token');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxOpenCvService {\n\n  cvState = new BehaviorSubject<OpenCvState>({\n    ready: false,\n    error: false,\n    loading: true,\n    state: 'loading'\n  });\n  configModule: OpenCvConfigModule;\n\n  constructor(@Inject(OpenCvConfigToken) options: OpenCvConfig, private _ngZone: NgZone) {\n    if (!options) {\n      options = {};\n    }\n    this.configModule = this.generateConfigModule(options);\n    this.loadOpenCv();\n  }\n\n  /**\n   * load the OpenCV script\n   */\n  loadOpenCv() {\n    this.cvState.next( this.newState('loading'));\n    // create global module variable\n    window['Module'] = this.configModule;\n\n    // create script element and set attributes\n    const script = <HTMLScriptElement> document.createElement('script');\n    script.setAttribute('async', '');\n    script.setAttribute('type', 'text/javascript');\n\n    // listen for errors\n    script.addEventListener('error', () => {\n      const err = new Error('Failed to load ' + this.configModule.scriptUrl);\n      this.cvState.next(this.newState('error'));\n      this.cvState.error(err);\n    }, {passive: true});\n\n    // set script url\n    script.src = this.configModule.scriptUrl;\n    // insert script as first script tag\n    const node = document.getElementsByTagName('script')[0];\n    if (node) {\n      node.parentNode.insertBefore(script, node);\n    } else {\n      document.head.appendChild(script);\n    }\n  }\n\n  /**\n   * generates a new state object\n   * @param change - the new state of the module\n   */\n  private newState(change: 'loading'|'ready'|'error'): OpenCvState {\n    const newStateObj: OpenCvState = {\n      ready: false,\n      loading: false,\n      error: false,\n      state: ''\n    };\n    Object.keys(newStateObj).forEach(key => {\n      if (key !== 'state') {\n        if (key === change) {\n          newStateObj[key] = true;\n          newStateObj.state = key;\n        } else {\n          newStateObj[key] = false;\n        }\n      }\n    });\n    return newStateObj;\n  }\n\n  /**\n   * generates a config module for the global Module object\n   * @param options - configuration options\n   */\n  private generateConfigModule(options: OpenCvConfig): OpenCvConfigModule {\n    return {\n      scriptUrl: options.openCvDirPath ? `${options.openCvDirPath}/opencv.js` : `/assets/opencv/opencv.js`,\n      wasmBinaryFile: 'opencv_js.wasm',\n      usingWasm: true,\n      onRuntimeInitialized: () => {\n        this._ngZone.run(() => {\n          console.log('openCV Ready');\n          this.cvState.next(this.newState('ready'));\n          if (options.runOnOpenCVInit) {\n            options.runOnOpenCVInit();\n          }\n        });\n      }\n    };\n  }\n}\n\n/**\n * describes the global Module object that is used to initiate OpenCV.js\n */\ninterface OpenCvConfigModule {\n  scriptUrl: string;\n  wasmBinaryFile: string;\n  usingWasm: boolean;\n  onRuntimeInitialized: Function;\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {ImageDimensions} from '../PublicModels';\nimport {LimitException, XYPosition} from '../PrivateModels';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LimitsService {\n\n\n  private limitDirections: RolesArray = ['left', 'right', 'top', 'bottom'];\n  /**\n   * stores the crop limits limits\n   */\n  private _limits = {\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0\n  };\n  /**\n   * stores the array of the draggable points displayed on the crop area\n   */\n  private _points: Array<PointPositionChange> = [];\n  /**\n   * stores the pane dimensions\n   */\n  private _paneDimensions: ImageDimensions;\n\n  // *********** //\n  // Observables //\n  // *********** //\n  public positions: BehaviorSubject<Array<PointPositionChange>> = new BehaviorSubject<Array<PointPositionChange>>(Array.from(this._points));\n  public repositionEvent: BehaviorSubject<Array<PointPositionChange>> = new BehaviorSubject<Array<PointPositionChange>>([]);\n  public limits: BehaviorSubject<AreaLimits> = new BehaviorSubject<AreaLimits>(this._limits);\n  public paneDimensions: BehaviorSubject<ImageDimensions> = new BehaviorSubject({width: 0, height: 0});\n\n  constructor() {\n  }\n\n  /**\n   * set privew pane dimensions\n   */\n  public setPaneDimensions(dimensions: ImageDimensions) {\n    return new Promise((resolve, reject) => {\n      this._paneDimensions = dimensions;\n      this.paneDimensions.next(dimensions);\n      resolve();\n    });\n  }\n\n  /**\n   * repositions points externally\n   */\n  public repositionPoints(positions) {\n    this._points = positions;\n    positions.forEach(position => {\n      this.positionChange(position);\n    });\n    this.repositionEvent.next(positions);\n  }\n\n  /**\n   * updates limits and point positions and calls next on the observables\n   * @param positionChangeData - position change event data\n   */\n  public positionChange(positionChangeData: PointPositionChange) {\n    // update positions according to current position change\n    this.updatePosition(positionChangeData);\n\n    // for each direction:\n    // 1. filter the _points that have a role as the direction's limit\n    // 2. for top and left find max x | y values, and min for right and bottom\n    this.limitDirections.forEach(direction => {\n      const relevantPoints = this._points.filter(point => {\n        return point.roles.includes(direction);\n      })\n        .map((point: PointPositionChange) => {\n          return point[this.getDirectionAxis(direction)];\n        });\n      let limit;\n      if (direction === 'top' || direction === 'left') {\n        limit = Math.max(...relevantPoints);\n      }\n      if (direction === 'right' || direction === 'bottom') {\n        limit = Math.min(...relevantPoints);\n      }\n      this._limits[direction] = limit;\n    });\n\n    this.limits.next(this._limits);\n    this.positions.next(Array.from(this._points));\n  }\n\n  /**\n   * updates the position of the point\n   * @param positionChange - position change event data\n   */\n  public updatePosition(positionChange: PointPositionChange) {\n    // finds the current position of the point by it's roles, than splices it for the new position or pushes it if it's not yet in the array\n    const index = this._points.findIndex(point => {\n      return this.compareArray(positionChange.roles, point.roles);\n    });\n    if (index === -1) {\n      this._points.push(positionChange);\n    } else {\n      this._points.splice(index, 1, positionChange);\n    }\n  }\n\n  /**\n   * check if a position change event exceeds the limits\n   * @param positionChange - position change event data\n   * @returns LimitException0\n   */\n  public exceedsLimit(positionChange: PointPositionChange): LimitException {\n    const pointLimits = this.limitDirections.filter(direction => {\n      return !positionChange.roles.includes(direction);\n    });\n\n    const limitException: LimitException = {\n      exceeds: false,\n      resetCoefficients: {\n        x: 0,\n        y: 0\n      },\n      resetCoordinates: {\n        x: positionChange.x,\n        y: positionChange.y\n      }\n    };\n\n    // limit directions are the opposite sides of the point's roles\n    pointLimits.forEach(direction => {\n      const directionAxis = this.getDirectionAxis(direction);\n      if (direction === 'top' || direction === 'left') {\n        if (positionChange[directionAxis] < this._limits[direction]) {\n          limitException.resetCoefficients[directionAxis] = 1;\n          limitException.resetCoordinates[directionAxis] = this._limits[direction];\n        }\n      } else if (direction === 'right' || direction === 'bottom') {\n        if (positionChange[directionAxis] > this._limits[direction]) {\n          limitException.resetCoefficients[directionAxis] = -1;\n          limitException.resetCoordinates[directionAxis] = this._limits[direction];\n        }\n      }\n    });\n\n    if (limitException.resetCoefficients.x !== 0 || limitException.resetCoefficients.y !== 0) {\n      limitException.exceeds = true;\n    }\n\n    return limitException;\n  }\n\n  /**\n   * rotate crop tool points clockwise\n   * @param resizeRatios - ratio between the new dimensions and the previous\n   * @param initialPreviewDimensions - preview pane dimensions before rotation\n   * @param initialPositions - current positions before rotation\n   */\n  public rotateClockwise(resizeRatios, initialPreviewDimensions, initialPositions: Array<PointPositionChange>) {\n    // convert positions to ratio between position to initial pane dimension\n    initialPositions = initialPositions.map(point => {\n      return new PositionChangeData({\n        x: point.x / initialPreviewDimensions.width,\n        y: point.y / initialPreviewDimensions.height,\n      }, point.roles);\n    });\n    this.repositionPoints(initialPositions.map(point => {\n      return this.rotateCornerClockwise(point);\n    }));\n  }\n\n  /**\n   * returns the corner positions after a 90 degrees clockwise rotation\n   */\n  private rotateCornerClockwise(corner: PointPositionChange): PointPositionChange {\n    const rotated: PointPositionChange = {\n      x: this._paneDimensions.width * (1 - corner.y),\n      y: this._paneDimensions.height * corner.x,\n      roles: []\n    };\n    // rotates corner according to order\n    const order: Array<RolesArray> = [\n      ['bottom', 'left'],\n      ['top', 'left'],\n      ['top', 'right'],\n      ['bottom', 'right'],\n      ['bottom', 'left']\n    ];\n    rotated.roles = order[order.findIndex(roles => {\n      return this.compareArray(roles, corner.roles);\n    }) + 1];\n    return rotated;\n  }\n\n  /**\n   * checks if two array contain the same values\n   * @param array1 - array 1\n   * @param array2 - array 2\n   * @returns boolean\n   */\n  public compareArray(array1: Array<string>, array2: Array<string>): boolean {\n    return array1.every((element) => {\n      return array2.includes(element);\n    }) && array1.length === array2.length;\n  }\n\n  private getDirectionAxis(direction) {\n    return {\n      left: 'x',\n      right: 'x',\n      top: 'y',\n      bottom: 'y'\n    }[direction];\n  }\n}\n\n\nexport interface PointPositionChange {\n  x: number;\n  y: number;\n  roles: RolesArray;\n}\n\nexport interface AreaLimits {\n  top: number;\n  bottom: number;\n  right: number;\n  left: number;\n}\n\nexport type RolesArray = Array<Direction>;\n\nexport class PositionChangeData implements PointPositionChange {\n  x: number;\n  y: number;\n  roles: RolesArray;\n\n  constructor(position: XYPosition, roles: RolesArray) {\n    this.x = position.x;\n    this.y = position.y;\n    this.roles = roles;\n  }\n}\n\nexport type Direction = 'left' | 'right' | 'top' | 'bottom';\n","import {AfterViewInit, Component, Input} from '@angular/core';\nimport {LimitsService, PointPositionChange, PositionChangeData} from '../../services/limits.service';\nimport {ImageDimensions} from '../../PublicModels';\nimport {LimitException, XYPosition} from '../../PrivateModels';\n\n@Component({\n  selector: 'ngx-draggable-point',\n  templateUrl: './ngx-draggable-point.component.html',\n})\nexport class NgxDraggablePointComponent implements AfterViewInit {\n  @Input() width = 10;\n  @Input() height = 10;\n  @Input() color = '#3cabe2';\n  @Input() shape: 'rect' | 'circle' = 'rect';\n  @Input() pointOptions: 'rect' | 'circle' = 'rect';\n  @Input() limitRoles: Array<'left'|'right'|'top'|'bottom'>;\n  @Input() startPosition: XYPosition;\n  @Input() container: HTMLElement;\n  @Input() private _currentPosition: XYPosition;\n  position: XYPosition = {\n    x: 0,\n    y: 0\n  };\n  private _paneDimensions: ImageDimensions;\n  resetPosition: XYPosition;\n\n  constructor(private limitsService: LimitsService) {}\n\n  ngAfterViewInit() {\n    Object.keys(this.pointOptions).forEach(key => {\n      this[key] = this.pointOptions[key];\n    });\n    // subscribe to pane dimensions changes\n    this.limitsService.paneDimensions.subscribe(dimensions => {\n      if (dimensions.width > 0 && dimensions.width > 0) {\n        this._paneDimensions = {\n          width: dimensions.width,\n          height: dimensions.height\n        };\n        this.position = this.getInitialPosition(dimensions);\n        this.limitsService.positionChange(new PositionChangeData(this.position, this.limitRoles));\n      }\n    });\n    // subscribe to external reposition events\n    this.limitsService.repositionEvent.subscribe(positions => {\n      if (positions.length > 0) {\n        this.externalReposition(positions);\n      }\n    });\n  }\n\n  /**\n   * returns a css style object for the point\n   */\n  pointStyle() {\n    return {\n      width: this.width + 'px',\n      height: this.height + 'px',\n      'background-color': this.color,\n      'border-radius': this.shape === 'circle' ? '100%' : 0,\n      position: 'absolute'\n    };\n  }\n\n  /**\n   * registers a position change on the limits service, and adjusts position if necessary\n   * @param position - the current position of the point\n   */\n  positionChange(position: XYPosition) {\n    const positionChangeData = new PositionChangeData(position, this.limitRoles);\n    const limitException = this.limitsService.exceedsLimit(positionChangeData);\n    if (limitException.exceeds) {\n      // if exceeds limits, reposition\n      this.resetPosition = limitException.resetCoordinates;\n    } else {\n      this.limitsService.positionChange(positionChangeData);\n      this._currentPosition = position;\n    }\n  }\n\n  /**\n   * adjusts the position of the point after a limit exception\n   */\n  private adjustPosition(limitException: LimitException) {\n    const newPosition = {\n      x: 0,\n      y: 0\n    };\n    Object.keys(this.startPosition).forEach(axis => {\n      newPosition[axis] = limitException.resetCoordinates[axis] + limitException.resetCoefficients[axis];\n    });\n    this.position = newPosition;\n    this.limitsService.positionChange(new PositionChangeData(this.position, this.limitRoles));\n  }\n\n  /**\n   * called on movement end, checks if last position exceeded the limits ad adjusts\n   */\n  movementEnd(position: XYPosition) {\n    let positionChangeData = new PositionChangeData(position, this.limitRoles);\n    const limitException = this.limitsService.exceedsLimit(positionChangeData);\n    if (limitException.exceeds) {\n      this.resetPosition = limitException.resetCoordinates;\n      if (limitException.exceeds) {\n        this.adjustPosition(limitException);\n        positionChangeData = new PositionChangeData(this.position, this.limitRoles);\n        this.limitsService.updatePosition(positionChangeData);\n      }\n    }\n  }\n\n  /**\n   * calculates the initial positions of the point by it's roles\n   * @param dimensions - dimensions of the pane in which the point is located\n   */\n  private getInitialPosition(dimensions: ImageDimensions) {\n    return {\n      x: this.limitRoles.includes('left') ? 0 : dimensions.width - this.width / 2,\n      y: this.limitRoles.includes('top') ? 0 : dimensions.height - this.height / 2\n    };\n  }\n\n  /**\n   * repositions the point after an external reposition event\n   * @param positions - an array of all points on the pane\n   */\n  private externalReposition(positions: Array<PointPositionChange>) {\n    positions.forEach(position => {\n      if (this.limitsService.compareArray(this.limitRoles, position.roles)) {\n        position = this.enforcePaneLimits(position);\n        this.position = {\n          x: position.x,\n          y: position.y\n        };\n      }\n    });\n  }\n\n  /**\n   * returns a new point position if the movement exceeded the pane limit\n   */\n  private enforcePaneLimits(position: PointPositionChange): PointPositionChange {\n    if (this._paneDimensions.width === 0 || this._paneDimensions.height === 0) {\n      return position;\n    } else {\n      if (position.x > this._paneDimensions.width) { position.x = this._paneDimensions.width; }\n      if (position.x < 0) { position.x = 1; }\n      if (position.y > this._paneDimensions.height) { position.y = this._paneDimensions.height; }\n      if (position.y < 0) { position.y = 1; }\n    }\n    return position;\n  }\n}\n\n","import {Component, EventEmitter, Inject, Output} from '@angular/core';\nimport {EditorActionButton} from '../../PrivateModels';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef} from '@angular/material';\n\n@Component({\n  selector: 'ngx-filter-menu',\n  templateUrl: './ngx-filter-menu.component.html',\n})\nexport class NgxFilterMenuComponent {\n  filterOptions: Array<EditorActionButton> = [\n    {\n      name: 'default',\n      icon: 'filter_b_and_w',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'B&W'\n    },\n    {\n      name: 'bw2',\n      icon: 'filter_b_and_w',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'B&W 2'\n    },\n    {\n      name: 'bw3',\n      icon: 'blur_on',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'B&W 3'\n    },\n    {\n      name: 'magic_color',\n      icon: 'filter_vintage',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'Magic Color'\n    },\n    {\n      name: 'original',\n      icon: 'crop_original',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'Original'\n    },\n  ];\n  @Output() filterSelected: EventEmitter<string> = new EventEmitter();\n  selectOption(optionName) {\n    this.data.filter = optionName;\n    this.bottomSheetRef.dismiss();\n  }\n\n  constructor(private bottomSheetRef: MatBottomSheetRef<NgxFilterMenuComponent>,\n              @Inject(MAT_BOTTOM_SHEET_DATA) public data: any\n              ) {}\n\n}\n","import {AfterViewInit, Component, Input, ViewChild} from '@angular/core';\nimport {LimitsService, PointPositionChange} from '../../services/limits.service';\nimport {ImageDimensions} from '../../PublicModels';\n\n@Component({\n  selector: 'ngx-shape-outine',\n  templateUrl: './ngx-shape-outline.component.html',\n})\nexport class NgxShapeOutlineComponent implements AfterViewInit {\n\n  @Input() color = '#3cabe2';\n  @Input() weight: number;\n  @Input() dimensions: ImageDimensions;\n  @ViewChild('outline') canvas;\n\n  private _points: Array<PointPositionChange>;\n  private _sortedPoints: Array<PointPositionChange>;\n  constructor(private limitsService: LimitsService) {}\n\n  ngAfterViewInit() {\n    // init drawing canvas dimensions\n    this.canvas.nativeElement.width = this.dimensions.width;\n    this.canvas.nativeElement.height = this.dimensions.height;\n    this.limitsService.positions.subscribe(positions => {\n      if (positions.length === 4) {\n        this._points = positions;\n        this.sortPoints();\n        this.clearCanvas();\n        this.drawShape();\n      }\n    });\n    // subscribe to changes in the pane's dimensions\n    this.limitsService.paneDimensions.subscribe(dimensions => {\n      this.clearCanvas();\n      this.canvas.nativeElement.width = dimensions.width;\n      this.canvas.nativeElement.height = dimensions.height;\n    });\n    // subscribe to reposition events\n    this.limitsService.repositionEvent.subscribe( positions => {\n      if (positions.length === 4) {\n        setTimeout( () => {\n          this.clearCanvas();\n          this.sortPoints();\n          this.drawShape();\n        }, 10);\n      }\n    });\n  }\n\n  /**\n   * clears the shape canvas\n   */\n  private clearCanvas() {\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, this.dimensions.width, this.dimensions.height);\n  }\n\n  /**\n   * sorts the array of points according to their clockwise alignment\n   */\n  private sortPoints() {\n    const _points = Array.from(this._points);\n    const sortedPoints = [];\n\n    const sortOrder = {\n      vertical: ['top', 'top', 'bottom', 'bottom'],\n      horizontal: ['left', 'right', 'right', 'left']\n    };\n\n    for (let i = 0; i < 4; i++) {\n      const roles = Array.from([sortOrder.vertical[i], sortOrder.horizontal[i]]);\n      sortedPoints.push(_points.filter((point) => {\n        return this.limitsService.compareArray(point.roles, roles);\n      })[0]);\n\n    }\n    this._sortedPoints = sortedPoints;\n  }\n\n  /**\n   * draws a line between the points according to their order\n   */\n  private drawShape() {\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    ctx.lineWidth = this.weight;\n    ctx.strokeStyle = this.color;\n    ctx.beginPath();\n    this._sortedPoints.forEach((point, index) => {\n      if (index === 0) {\n        ctx.moveTo(point.x, point.y);\n      }\n      if (index !== this._sortedPoints.length - 1) {\n        const nextPoint = this._sortedPoints[index + 1];\n        ctx.lineTo(nextPoint.x, nextPoint.y);\n      } else {\n        ctx.closePath();\n      }\n    });\n    ctx.stroke();\n  }\n}\n\n\n","import {Component, ElementRef, EventEmitter, InjectionToken, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {LimitsService, PointPositionChange, PositionChangeData, RolesArray} from '../../services/limits.service';\nimport {MatBottomSheet} from '@angular/material';\nimport {NgxFilterMenuComponent} from '../filter-menu/ngx-filter-menu.component';\nimport {PointShape} from '../../PrivateModels';\nimport {NgxOpenCvService} from '../../services/ngx-open-cv.service';\nimport {ImageDimensions, DocScannerConfig, OpenCvConfig, OpenCvState} from '../../PublicModels';\nimport {EditorActionButton, PointOptions} from '../../PrivateModels';\n\ndeclare var cv: any;\n\n@Component({\n  selector: 'ngx-doc-scanner',\n  templateUrl: './ngx-doc-scanner.component.html',\n  styleUrls: ['./ngx-doc-scanner.component.scss']\n})\nexport class NgxDocScannerComponent implements OnInit {\n  /**\n   * editor config object\n   */\n  options: ImageEditorConfig;\n  // ************* //\n  // EDITOR CONFIG //\n  // ************* //\n  /**\n   * an array of action buttons displayed on the editor screen\n   */\n  private editorButtons: Array<EditorActionButton> = [\n    {\n      name: 'exit',\n      action: () => {\n        this.exitEditor.emit('canceled');\n      },\n      icon: 'arrow_back',\n      type: 'fab',\n      mode: 'crop'\n    },\n    {\n      name: 'rotate',\n      action: this.rotateImage.bind(this),\n      icon: 'rotate_right',\n      type: 'fab',\n      mode: 'crop'\n    },\n    {\n      name: 'done_crop',\n      action: async () => {\n        this.mode = 'color';\n        await this.transform();\n        await this.applyFilter(true);\n      },\n      icon: 'done',\n      type: 'fab',\n      mode: 'crop'\n    },\n    {\n      name: 'back',\n      action: () => {\n        this.mode = 'crop';\n        this.loadFile(this.originalImage);\n      },\n      icon: 'arrow_back',\n      type: 'fab',\n      mode: 'color'\n    },\n    {\n      name: 'filter',\n      action: () => {\n        return this.chooseFilters();\n      },\n      icon: 'photo_filter',\n      type: 'fab',\n      mode: 'color'\n    },\n    {\n      name: 'upload',\n      action: this.exportImage.bind(this),\n      icon: 'cloud_upload',\n      type: 'fab',\n      mode: 'color'\n    },\n  ];\n  /**\n   * returns an array of buttons according to the editor mode\n   */\n  get displayedButtons() {\n    return this.editorButtons.filter(button => {\n      return button.mode === this.mode;\n    });\n  }\n  /**\n   * max width of the preview area\n   */\n  private maxPreviewWidth: number;\n  /**\n   * dimensions of the image container\n   */\n  imageDivStyle: {[key: string]: string|number};\n  /**\n   * editor div style\n   */\n  editorStyle: {[key: string]: string|number};\n\n  // ************* //\n  // EDITOR STATE //\n  // ************* //\n  /**\n   * state of opencv loading\n   */\n  private cvState: string;\n  /**\n   * true after the image is loaded and preview is displayed\n   */\n  imageLoaded = false;\n  /**\n   * editor mode\n   */\n  mode: 'crop'|'color' = 'crop';\n  /**\n   * filter selected by the user, returned by the filter selector bottom sheet\n   */\n  private selectedFilter = 'default';\n\n  // ******************* //\n  // OPERATION VARIABLES //\n  // ******************* //\n  /**\n   * viewport dimensions\n   */\n  private screenDimensions: ImageDimensions;\n  /**\n   * image dimensions\n   */\n  private imageDimensions: ImageDimensions = {\n    width: 0,\n    height: 0\n  };\n  /**\n   * dimensions of the preview pane\n   */\n  previewDimensions: ImageDimensions;\n  /**\n   * ration between preview image and original\n   */\n  private imageResizeRatio: number;\n  /**\n   * stores the original image for reset purposes\n   */\n  private originalImage: File;\n  /**\n   * stores the edited image\n   */\n  private editedImage: HTMLCanvasElement;\n  /**\n   * stores the preview image as canvas\n   */\n  @ViewChild('PreviewCanvas', {read: ElementRef}) private previewCanvas: ElementRef;\n  /**\n   * an array of points used by the crop tool\n   */\n  private points: Array<PointPositionChange>;\n\n  // ************** //\n  // EVENT EMITTERS //\n  // ************** //\n  /**\n   * optional binding to the exit button of the editor\n   */\n  @Output() exitEditor: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * fires on edit completion\n   */\n  @Output() editResult: EventEmitter<Blob> = new EventEmitter<Blob>();\n  /**\n   * emits errors, can be linked to an error handler of choice\n   */\n  @Output() error: EventEmitter<any> = new EventEmitter<any>();\n  /**\n   * emits the loading status of the cv module.\n   */\n  @Output() ready: EventEmitter<boolean> = new EventEmitter<boolean>();\n  /**\n   * emits true when processing is done, false when completed\n   */\n  @Output() processing: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  // ****** //\n  // INPUTS //\n  // ****** //\n  /**\n   * set image for editing\n   * @param file - file from form input\n   */\n  @Input() set file(file: File) {\n    if (file) {\n      setTimeout(() => {\n        this.processing.emit(true);\n      }, 5);\n      this.imageLoaded = false;\n      this.originalImage = file;\n      this.ngxOpenCv.cvState.subscribe(\n        async (cvState: OpenCvState) => {\n          if (cvState.ready) {\n            // read file to image & canvas\n            await this.loadFile(file);\n            this.processing.emit(false);\n          }\n        });\n    }\n  }\n\n  /**\n   * editor configuration object\n   */\n  @Input() config: DocScannerConfig;\n\n\n  constructor(private ngxOpenCv: NgxOpenCvService, private limitsService: LimitsService, private bottomSheet: MatBottomSheet) {\n    this.screenDimensions = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n\n    // subscribe to status of cv module\n    this.ngxOpenCv.cvState.subscribe((cvState: OpenCvState) => {\n      this.cvState = cvState.state;\n      this.ready.emit(cvState.ready);\n      if (cvState.error) {\n        this.error.emit(new Error('error loading cv'));\n      } else if (cvState.loading) {\n        this.processing.emit(true);\n      } else if (cvState.ready) {\n        this.processing.emit(false);\n      }\n    });\n\n    // subscribe to positions of crop tool\n    this.limitsService.positions.subscribe(points => {\n      this.points = points;\n    });\n  }\n\n  ngOnInit() {\n    // set options from config object\n    this.options = new ImageEditorConfig(this.config);\n    // set export image icon\n    this.editorButtons.forEach(button => {\n      if (button.name === 'upload') {\n        button.icon = this.options.exportImageIcon;\n      }\n    });\n    this.maxPreviewWidth = this.options.maxPreviewWidth;\n    this.editorStyle = this.options.editorStyle;\n  }\n\n  // ***************************** //\n  // editor action buttons methods //\n  // ***************************** //\n\n  /**\n   * emits the exitEditor event\n   */\n  exit() {\n    this.exitEditor.emit('canceled');\n  }\n\n  /**\n   * applies the selected filter, and when done emits the resulted image\n   */\n  private async exportImage() {\n    await this.applyFilter(false);\n    if (this.options.maxImageDimensions) {\n      this.resize()\n        .then(resizeResult => {\n          resizeResult.toBlob((blob) => {\n            this.editResult.emit(blob);\n            this.processing.emit(false);\n          }, this.originalImage.type);\n        });\n    } else {\n      this.editedImage.toBlob((blob) => {\n        this.editResult.emit(blob);\n        this.processing.emit(false);\n      }, this.originalImage.type);\n    }\n  }\n\n  /**\n   * open the bottom sheet for selecting filters, and applies the selected filter in preview mode\n   */\n  private chooseFilters() {\n    const data = { filter: this.selectedFilter };\n    const bottomSheetRef = this.bottomSheet.open(NgxFilterMenuComponent, {\n      data: data\n    });\n    bottomSheetRef.afterDismissed().subscribe(() => {\n      this.selectedFilter = data.filter;\n      this.applyFilter(true);\n    });\n\n  }\n\n  // *************************** //\n  // File Input & Output Methods //\n  // *************************** //\n  /**\n   * load image from input field\n   */\n  private loadFile(file: File) {\n    return new Promise(async (resolve, reject) => {\n      this.processing.emit(true);\n      try {\n        await this.readImage(file);\n      } catch (err) {\n        console.error(err);\n        this.error.emit(new Error(err));\n      }\n      try {\n        await this.showPreview();\n      } catch (err) {\n        console.error(err);\n        this.error.emit(new Error(err));\n      }\n      // set pane limits\n      // show points\n      this.imageLoaded = true;\n      await this.limitsService.setPaneDimensions({width: this.previewDimensions.width, height: this.previewDimensions.height});\n      setTimeout(async () => {\n        await this.detectContours();\n        this.processing.emit(false);\n        resolve();\n      }, 15);\n    });\n  }\n\n  /**\n   * read image from File object\n   */\n  private readImage(file: File) {\n    return new Promise(async (resolve, reject) => {\n      let imageSrc;\n      try {\n        imageSrc = await readFile();\n      } catch (err) {\n        reject(err);\n      }\n      const img = new Image();\n      img.onload = () => {\n        // set edited image canvas and dimensions\n        this.editedImage = <HTMLCanvasElement> document.createElement('canvas');\n        this.editedImage.width = img.width;\n        this.editedImage.height = img.height;\n        this.imageDimensions.width = img.width;\n        this.imageDimensions.height = img.height;\n        const ctx = this.editedImage.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        this.setPreviewPaneDimensions(this.editedImage);\n        resolve();\n      };\n      img.src = imageSrc;\n    });\n\n    /**\n     * read file from input field\n     */\n    function readFile() {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n          resolve(reader.result);\n        };\n        reader.onerror = (err) => {\n          reject(err);\n        };\n        reader.readAsDataURL(file);\n      });\n    }\n  }\n\n  // ************************ //\n  // Image Processing Methods //\n  // ************************ //\n  /**\n   * rotate image 90 degrees\n   */\n  private rotateImage() {\n    return new Promise((resolve, reject) => {\n      this.processing.emit(true);\n      const src = cv.imread(this.editedImage);\n      const dst = new cv.Mat();\n      cv.transpose(src, dst);\n      cv.flip(dst, dst, 1);\n      cv.imshow(this.editedImage, dst);\n      src.delete(); dst.delete();\n      // save current preview dimensions and positions\n      const initialPreviewDimensions = {width: 0, height: 0};\n      Object.assign(initialPreviewDimensions, this.previewDimensions);\n      const initialPositions = Array.from(this.points);\n      // get new dimensions\n      // set new preview pane dimensions\n      this.setPreviewPaneDimensions(this.editedImage);\n      // get preview pane resize ratio\n      const previewResizeRatios = {\n        width: this.previewDimensions.width / initialPreviewDimensions.width,\n        height: this.previewDimensions.height / initialPreviewDimensions.height\n      };\n      // set new preview pane dimensions\n\n      this.limitsService.rotateClockwise(previewResizeRatios, initialPreviewDimensions, initialPositions);\n      this.showPreview().then(() => {\n        this.processing.emit(false);\n        resolve();\n      });\n    });\n\n\n  }\n\n  /**\n   * detects the contours of the document and\n   **/\n  private detectContours(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      // this.processing.emit(true);\n      // load the image and compute the ratio of the old height to the new height, clone it, and resize it\n      const processingResizeRatio = 0.5;\n      const dst = cv.imread(this.editedImage);\n      const dsize = new cv.Size(dst.rows * processingResizeRatio, dst.cols * processingResizeRatio);\n      const ksize = new cv.Size(5, 5);\n      // convert the image to grayscale, blur it, and find edges in the image\n      cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n      cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n      cv.Canny(dst, dst, 75, 200);\n      // find contours\n      cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY);\n      const contours = new cv.MatVector();\n      const hierarchy = new cv.Mat();\n      cv.findContours(dst, contours, hierarchy, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE);\n      const rect = cv.boundingRect(dst);\n      dst.delete(); hierarchy.delete(); contours.delete();\n      // transform the rectangle into a set of points\n      Object.keys(rect).forEach(key => {\n        rect[key] = rect[key]  * this.imageResizeRatio;\n      });\n\n      const contourCoordinates = [\n        new PositionChangeData({x: rect.x, y: rect.y}, ['left', 'top']),\n        new PositionChangeData({x: rect.x + rect.width, y: rect.y}, ['right', 'top']),\n        new PositionChangeData({x: rect.x + rect.width, y: rect.y + rect.height}, ['right', 'bottom']),\n        new PositionChangeData({x: rect.x, y: rect.y + rect.height}, ['left', 'bottom']),\n      ];\n\n      this.limitsService.repositionPoints(contourCoordinates);\n      // this.processing.emit(false);\n      resolve();\n    });\n  }\n\n  /**\n   * apply perspective transform\n   */\n  private transform(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.processing.emit(true);\n      const src = cv.imread(this.editedImage);\n      const dst = new cv.Mat();\n\n      // create source coordinates matrix\n      const sourceCoordinates = [\n        this.getPoint(['top', 'left']),\n        this.getPoint(['top', 'right']),\n        this.getPoint(['bottom', 'right']),\n        this.getPoint(['bottom', 'left'])\n      ].map(point => {\n        return [point.x / this.imageResizeRatio, point.y / this.imageResizeRatio];\n      });\n\n      // get max width\n      const bottomWidth = this.getPoint(['bottom', 'right']).x - this.getPoint(['bottom', 'left']).x;\n      const topWidth = this.getPoint(['top', 'right']).x - this.getPoint(['top', 'left']).x;\n      const maxWidth = Math.max(bottomWidth, topWidth) / this.imageResizeRatio;\n      // get max height\n      const leftHeight = this.getPoint(['bottom', 'left']).y - this.getPoint(['top', 'left']).y;\n      const rightHeight = this.getPoint(['bottom', 'right']).y - this.getPoint(['top', 'right']).y;\n      const maxHeight = Math.max(leftHeight, rightHeight) / this.imageResizeRatio;\n      // create dest coordinates matrix\n      const destCoordinates = [\n        [0, 0],\n        [maxWidth - 1, 0],\n        [maxWidth - 1, maxHeight - 1],\n        [0, maxHeight - 1]\n      ];\n\n      // convert to open cv matrix objects\n      const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...sourceCoordinates));\n      const Md = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...destCoordinates));\n      const transformMatrix = cv.getPerspectiveTransform(Ms, Md);\n      // set new image size\n      const dsize = new cv.Size(maxWidth, maxHeight);\n      // perform warp\n      cv.warpPerspective(src, dst, transformMatrix, dsize, cv.INTER_LINEAR, cv.BORDER_CONSTANT, new cv.Scalar());\n      cv.imshow(this.editedImage, dst);\n\n      src.delete(); dst.delete(); Ms.delete(); Md.delete(); transformMatrix.delete();\n\n      this.setPreviewPaneDimensions(this.editedImage);\n      this.showPreview().then(() => {\n        this.processing.emit(false);\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * applies the selected filter to the image\n   * @param preview - when true, will not apply the filter to the edited image but only display a preview.\n   * when false, will apply to editedImage\n   */\n  private applyFilter(preview: boolean): Promise<void> {\n    return new Promise(async (resolve, reject) => {\n      this.processing.emit(true);\n      // default options\n      const options = {\n        blur: false,\n        th: true,\n        thMode: cv.ADAPTIVE_THRESH_MEAN_C,\n        thMeanCorrection: 10,\n        thBlockSize: 25,\n        thMax: 255,\n        grayScale: true,\n      };\n      const dst = cv.imread(this.editedImage);\n\n      switch (this.selectedFilter) {\n        case 'original':\n          options.th = false;\n          options.grayScale = false;\n          options.blur = false;\n          break;\n        case 'magic_color':\n          options.grayScale = false;\n          break;\n        case 'bw2':\n          options.thMode = cv.ADAPTIVE_THRESH_GAUSSIAN_C;\n          options.thMeanCorrection = 15;\n          options.thBlockSize = 15;\n          break;\n        case 'bw3':\n          options.blur = true;\n          options.thMeanCorrection = 15;\n          break;\n      }\n      if (options.grayScale) {\n        cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n      }\n      if (options.blur) {\n        const ksize = new cv.Size(5, 5);\n        cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n      }\n      if (options.th) {\n        if (options.grayScale) {\n          cv.adaptiveThreshold(dst, dst, options.thMax, options.thMode, cv.THRESH_BINARY, options.thBlockSize, options.thMeanCorrection);\n        } else {\n          dst.convertTo(dst, -1, 1, 60);\n          cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY);\n        }\n      }\n      if (!preview) {\n\n        cv.imshow(this.editedImage, dst);\n      }\n      await this.showPreview(dst);\n      this.processing.emit(false);\n      resolve();\n    });\n  }\n\n  /**\n   * resize an image to fit constraints set in options.maxImageDimensions\n   */\n  private resize(image?: any): Promise<HTMLCanvasElement> {\n    return new Promise((resolve, reject) => {\n      this.processing.emit(true);\n      const src = cv.imread(this.editedImage);\n      const currentDimensions = {\n        width: src.size().width,\n        height: src.size().height\n      };\n      const resizeDimensions = {\n        width: 0,\n        height: 0\n      };\n      if (currentDimensions.width > this.options.maxImageDimensions.width) {\n        resizeDimensions.width = this.options.maxImageDimensions.width;\n        resizeDimensions.height = this.options.maxImageDimensions.width / currentDimensions.width * currentDimensions.height;\n        if (resizeDimensions.height > this.options.maxImageDimensions.height) {\n          resizeDimensions.height = this.options.maxImageDimensions.height;\n          resizeDimensions.width = this.options.maxImageDimensions.height / currentDimensions.height * currentDimensions.width;\n        }\n        const dsize = new cv.Size(Math.floor(resizeDimensions.width), Math.floor(resizeDimensions.height));\n        cv.resize(src, src, dsize, 0, 0, cv.INTER_AREA);\n        const resizeResult = <HTMLCanvasElement> document.createElement('canvas');\n        cv.imshow(resizeResult, src);\n        src.delete();\n        this.processing.emit(false);\n        resolve(resizeResult);\n      } else {\n        if (image) {\n          resolve(image);\n        } else {\n          resolve(this.editedImage);\n        }\n      }\n    });\n  }\n\n  /**\n   * display a preview of the image on the preview canvas\n   */\n  private showPreview(image?: any) {\n    return new Promise((resolve, reject) => {\n      let src;\n      if (image) {\n        src = image;\n      } else {\n        src = cv.imread(this.editedImage);\n      }\n      const dst = new cv.Mat();\n      const dsize = new cv.Size(0, 0);\n      cv.resize(src, dst, dsize, this.imageResizeRatio, this.imageResizeRatio, cv.INTER_AREA);\n      cv.imshow(this.previewCanvas.nativeElement, dst);\n      src.delete();\n      dst.delete();\n      resolve();\n    });\n  }\n\n  // *************** //\n  // Utility Methods //\n  // *************** //\n  /**\n   * set preview canvas dimensions according to the canvas element of the original image\n   */\n  private setPreviewPaneDimensions(img: HTMLCanvasElement) {\n    // set preview pane dimensions\n    this.previewDimensions = this.calculateDimensions(img.width, img.height);\n    this.previewCanvas.nativeElement.width = this.previewDimensions.width;\n    this.previewCanvas.nativeElement.height = this.previewDimensions.height;\n    this.imageResizeRatio = this.previewDimensions.width / img.width;\n    this.imageDivStyle = {\n      width: this.previewDimensions.width + this.options.cropToolDimensions.width + 'px',\n      height: this.previewDimensions.height + this.options.cropToolDimensions.height + 'px',\n      'margin-left': `calc((100% - ${this.previewDimensions.width + 10}px) / 2 + ${this.options.cropToolDimensions.width / 2}px)`,\n      'margin-right': `calc((100% - ${this.previewDimensions.width + 10}px) / 2 - ${this.options.cropToolDimensions.width / 2}px)`,\n    };\n    this.limitsService.setPaneDimensions({width: this.previewDimensions.width, height: this.previewDimensions.height});\n  }\n\n  /**\n   * calculate dimensions of the preview canvas\n   */\n  private calculateDimensions(width: number, height: number): { width: number; height: number; ratio: number} {\n    const ratio = width / height;\n\n    const maxWidth = this.screenDimensions.width > this.maxPreviewWidth ?\n      this.maxPreviewWidth : this.screenDimensions.width - 20;\n    const maxHeight = this.screenDimensions.height - 200;\n    const calculated = {\n      width: maxWidth,\n      height: Math.round(maxWidth / ratio),\n      ratio: ratio\n    };\n\n    if (calculated.height > maxHeight) {\n      calculated.height = maxHeight;\n      calculated.width = Math.round(maxHeight * ratio);\n    }\n    return calculated;\n  }\n\n  /**\n   * returns a point by it's roles\n   * @param roles - an array of roles by which the point will be fetched\n   */\n  private getPoint(roles: RolesArray) {\n    return this.points.find(point => {\n      return this.limitsService.compareArray(point.roles, roles);\n    });\n  }\n}\n\n/**\n * a class for generating configuration objects for the editor\n */\nclass ImageEditorConfig implements DocScannerConfig {\n  /**\n   * max dimensions of oputput image. if set to zero\n   */\n  maxImageDimensions: ImageDimensions = {\n    width: 800,\n    height: 1200\n  };\n  /**\n   * background color of the main editor div\n   */\n  editorBackgroundColor = 'dimgrey';\n  /**\n   * css properties for the main editor div\n   */\n  editorDimensions: { width: string; height: string; } = {\n    width: '100vw',\n    height: '100vh'\n  };\n  /**\n   * css that will be added to the main div of the editor component\n   */\n  extraCss: {[key: string]: string|number} = {\n    position: 'absolute',\n    top: 0,\n    left: 0\n  };\n\n  /**\n   * material design theme color name\n   */\n  buttonThemeColor: 'primary'|'warn'|'accent' = 'accent';\n  /**\n   * icon for the button that completes the editing and emits the edited image\n   */\n  exportImageIcon = 'cloud_upload';\n  /**\n   * color of the crop tool\n   */\n  cropToolColor = '#3cabe2';\n  /**\n   * shape of the crop tool, can be either a rectangle or a circle\n   */\n  cropToolShape: PointShape = 'rect';\n  /**\n   * dimensions of the crop tool\n   */\n  cropToolDimensions: ImageDimensions = {\n    width: 10,\n    height: 10\n  };\n  /**\n   * aggregation of the properties regarding point attributes generated by the class constructor\n   */\n  pointOptions: PointOptions;\n  /**\n   * aggregation of the properties regarding the editor style generated by the class constructor\n   */\n  editorStyle?: {[key: string]: string|number};\n  /**\n   * crop tool outline width\n   */\n  cropToolLineWeight = 3;\n  /**\n   * maximum size of the preview pane\n   */\n  maxPreviewWidth = 800;\n\n  constructor(options: DocScannerConfig) {\n    if (options) {\n      Object.keys(options).forEach(key => {\n        this[key] = options[key];\n      });\n    }\n\n    this.editorStyle = {'background-color': this.editorBackgroundColor };\n    Object.assign(this.editorStyle, this.editorDimensions);\n    Object.assign(this.editorStyle, this.extraCss);\n\n    this.pointOptions = {\n      shape: this.cropToolShape,\n      color: this.cropToolColor,\n      width: 0,\n      height: 0\n    };\n    Object.assign(this.pointOptions, this.cropToolDimensions);\n  }\n}\n\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {NgxOpenCvService, OpenCvConfigToken} from './services/ngx-open-cv.service';\nimport {NgxDraggablePointComponent} from './components/draggable-point/ngx-draggable-point.component';\nimport {NgxFilterMenuComponent} from './components/filter-menu/ngx-filter-menu.component';\nimport {NgxShapeOutlineComponent} from './components/shape-outline/ngx-shape-outline.component';\nimport {NgxDocScannerComponent} from './components/image-editor/ngx-doc-scanner.component';\nimport {LimitsService} from './services/limits.service';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {MatBottomSheetModule, MatButtonModule, MatIconModule, MatListModule} from '@angular/material';\nimport {AngularDraggableModule} from 'angular2-draggable';\nimport {CommonModule} from '@angular/common';\nimport {OpenCvConfig} from './PublicModels';\n\n@NgModule({\n  declarations: [\n    NgxDraggablePointComponent,\n    NgxFilterMenuComponent,\n    NgxShapeOutlineComponent,\n    NgxDocScannerComponent,\n  ],\n  imports: [\n    FlexLayoutModule,\n    MatButtonModule,\n    MatIconModule,\n    MatBottomSheetModule,\n    MatListModule,\n    AngularDraggableModule,\n    CommonModule,\n  ],\n  exports: [\n    NgxDocScannerComponent,\n  ],\n  entryComponents: [\n    NgxFilterMenuComponent,\n  ],\n  providers: [\n    NgxOpenCvService,\n    LimitsService,\n  ]\n})\nexport class NgxDocumentScannerModule {\n  static forRoot(config: OpenCvConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxDocumentScannerModule,\n      providers: [{ provide: OpenCvConfigToken, useValue: config }]\n    };\n  }\n}\n"]}