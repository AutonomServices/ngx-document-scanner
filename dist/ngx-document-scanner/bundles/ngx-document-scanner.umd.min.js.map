{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ngx-document-scanner/lib/services/limits.service.ts","ng://ngx-document-scanner/lib/components/draggable-point/ngx-draggable-point.component.ts","ng://ngx-document-scanner/lib/components/filter-menu/ngx-filter-menu.component.ts","ng://ngx-document-scanner/lib/components/shape-outline/ngx-shape-outline.component.ts","ng://ngx-document-scanner/lib/components/image-editor/ngx-doc-scanner.component.ts","ng://ngx-document-scanner/lib/ngx-document-scanner.module.ts"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","length","push","__read","o","m","r","i","ar","error","__spread","arguments","concat","LimitsService","limitDirections","_limits","top","bottom","right","left","_points","positions","BehaviorSubject","Array","from","repositionEvent","limits","paneDimensions","width","height","prototype","setPaneDimensions","dimensions","_this","_paneDimensions","repositionPoints","forEach","position","positionChange","positionChangeData","updatePosition","direction","limit","relevantPoints","filter","point","roles","includes","map","getDirectionAxis","Math","max","min","index","findIndex","compareArray","splice","exceedsLimit","pointLimits","limitException","exceeds","resetCoefficients","x","resetCoordinates","directionAxis","rotateClockwise","resizeRatios","initialPreviewDimensions","initialPositions","PositionChangeData","rotateCornerClockwise","corner","rotated","order","array1","array2","every","element","Injectable","args","providedIn","NgxDraggablePointComponent","limitsService","color","shape","pointOptions","ngAfterViewInit","Object","keys","key","subscribe","getInitialPosition","limitRoles","externalReposition","pointStyle","background-color","border-radius","resetPosition","_currentPosition","adjustPosition","newPosition","startPosition","axis","movementEnd","enforcePaneLimits","Component","selector","template","Input","NgxFilterMenuComponent","bottomSheetRef","data","filterOptions","name","icon","action","filterSelected","emit","text","EventEmitter","selectOption","optionName","dismiss","MatBottomSheetRef","Inject","MAT_BOTTOM_SHEET_DATA","Output","NgxShapeOutlineComponent","canvas","nativeElement","sortPoints","clearCanvas","drawShape","setTimeout","getContext","clearRect","sortedPoints","sortOrder","vertical","horizontal","_sortedPoints","ctx","lineWidth","weight","strokeStyle","beginPath","moveTo","nextPoint","lineTo","closePath","stroke","ViewChild","NgxDocScannerComponent","ngxOpenCv","bottomSheet","editorButtons","exitEditor","type","mode","rotateImage","bind","transform","_a","applyFilter","loadFile","originalImage","chooseFilters","exportImage","imageLoaded","selectedFilter","imageDimensions","editResult","ready","processing","screenDimensions","window","innerWidth","innerHeight","cvState","state","Error","loading","points","defineProperty","button","file","ngOnInit","options","ImageEditorConfig","config","exportImageIcon","maxPreviewWidth","editorStyle","exit","maxImageDimensions","resize","editedImage","resizeResult","toBlob","blob","open","afterDismissed","readImage","console","err_1","showPreview","err_2","previewDimensions","detectContours","readFile","reader","FileReader","onload","event","onerror","err","readAsDataURL","imageSrc","err_3","img","Image","document","createElement","drawImage","_b","setPreviewPaneDimensions","src","dst","cv","imread","transpose","flip","imshow","delete","assign","previewResizeRatios","ksize","Size","rows","cols","cvtColor","COLOR_RGBA2GRAY","GaussianBlur","BORDER_DEFAULT","Canny","threshold","THRESH_BINARY","contours","MatVector","hierarchy","Mat","findContours","RETR_CCOMP","CHAIN_APPROX_SIMPLE","rect","boundingRect","imageResizeRatio","contourCoordinates","sourceCoordinates","getPoint","bottomWidth","topWidth","maxWidth","leftHeight","rightHeight","maxHeight","destCoordinates","Ms","matFromArray","CV_32FC2","Md","transformMatrix","getPerspectiveTransform","dsize","warpPerspective","INTER_LINEAR","BORDER_CONSTANT","Scalar","preview","blur","th","thMode","ADAPTIVE_THRESH_MEAN_C","thMeanCorrection","thBlockSize","thMax","grayScale","ADAPTIVE_THRESH_GAUSSIAN_C","adaptiveThreshold","convertTo","image","currentDimensions","size","resizeDimensions","floor","INTER_AREA","previewCanvas","calculateDimensions","imageDivStyle","cropToolDimensions","margin-left","margin-right","ratio","calculated","round","find","NgxOpenCVService","MatBottomSheet","read","ElementRef","editorBackgroundColor","editorDimensions","extraCss","buttonThemeColor","cropToolColor","cropToolShape","cropToolLineWeight","NgxDocumentScannerModule","forRoot","ngModule","providers","provide","OpenCvConfigToken","useValue","NgModule","declarations","imports","FlexLayoutModule","MatButtonModule","MatIconModule","MatBottomSheetModule","MatListModule","AngularDraggableModule","CommonModule","NgxOpenCVModule","exports","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {ImageDimensions} from '../PublicModels';\r\nimport {LimitException, XYPosition} from '../PrivateModels';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LimitsService {\r\n\r\n\r\n  private limitDirections: RolesArray = ['left', 'right', 'top', 'bottom'];\r\n  /**\r\n   * stores the crop limits limits\r\n   */\r\n  private _limits = {\r\n    top: 0,\r\n    bottom: 0,\r\n    right: 0,\r\n    left: 0\r\n  };\r\n  /**\r\n   * stores the array of the draggable points displayed on the crop area\r\n   */\r\n  private _points: Array<PointPositionChange> = [];\r\n  /**\r\n   * stores the pane dimensions\r\n   */\r\n  private _paneDimensions: ImageDimensions;\r\n\r\n  // *********** //\r\n  // Observables //\r\n  // *********** //\r\n  public positions: BehaviorSubject<Array<PointPositionChange>> = new BehaviorSubject<Array<PointPositionChange>>(Array.from(this._points));\r\n  public repositionEvent: BehaviorSubject<Array<PointPositionChange>> = new BehaviorSubject<Array<PointPositionChange>>([]);\r\n  public limits: BehaviorSubject<AreaLimits> = new BehaviorSubject<AreaLimits>(this._limits);\r\n  public paneDimensions: BehaviorSubject<ImageDimensions> = new BehaviorSubject({width: 0, height: 0});\r\n\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * set privew pane dimensions\r\n   */\r\n  public setPaneDimensions(dimensions: ImageDimensions) {\r\n    return new Promise((resolve, reject) => {\r\n      this._paneDimensions = dimensions;\r\n      this.paneDimensions.next(dimensions);\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * repositions points externally\r\n   */\r\n  public repositionPoints(positions) {\r\n    this._points = positions;\r\n    positions.forEach(position => {\r\n      this.positionChange(position);\r\n    });\r\n    this.repositionEvent.next(positions);\r\n  }\r\n\r\n  /**\r\n   * updates limits and point positions and calls next on the observables\r\n   * @param positionChangeData - position change event data\r\n   */\r\n  public positionChange(positionChangeData: PointPositionChange) {\r\n    // update positions according to current position change\r\n    this.updatePosition(positionChangeData);\r\n\r\n    // for each direction:\r\n    // 1. filter the _points that have a role as the direction's limit\r\n    // 2. for top and left find max x | y values, and min for right and bottom\r\n    this.limitDirections.forEach(direction => {\r\n      const relevantPoints = this._points.filter(point => {\r\n        return point.roles.includes(direction);\r\n      })\r\n        .map((point: PointPositionChange) => {\r\n          return point[this.getDirectionAxis(direction)];\r\n        });\r\n      let limit;\r\n      if (direction === 'top' || direction === 'left') {\r\n        limit = Math.max(...relevantPoints);\r\n      }\r\n      if (direction === 'right' || direction === 'bottom') {\r\n        limit = Math.min(...relevantPoints);\r\n      }\r\n      this._limits[direction] = limit;\r\n    });\r\n\r\n    this.limits.next(this._limits);\r\n    this.positions.next(Array.from(this._points));\r\n  }\r\n\r\n  /**\r\n   * updates the position of the point\r\n   * @param positionChange - position change event data\r\n   */\r\n  public updatePosition(positionChange: PointPositionChange) {\r\n    // finds the current position of the point by it's roles, than splices it for the new position or pushes it if it's not yet in the array\r\n    const index = this._points.findIndex(point => {\r\n      return this.compareArray(positionChange.roles, point.roles);\r\n    });\r\n    if (index === -1) {\r\n      this._points.push(positionChange);\r\n    } else {\r\n      this._points.splice(index, 1, positionChange);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * check if a position change event exceeds the limits\r\n   * @param positionChange - position change event data\r\n   * @returns LimitException0\r\n   */\r\n  public exceedsLimit(positionChange: PointPositionChange): LimitException {\r\n    const pointLimits = this.limitDirections.filter(direction => {\r\n      return !positionChange.roles.includes(direction);\r\n    });\r\n\r\n    const limitException: LimitException = {\r\n      exceeds: false,\r\n      resetCoefficients: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      resetCoordinates: {\r\n        x: positionChange.x,\r\n        y: positionChange.y\r\n      }\r\n    };\r\n\r\n    // limit directions are the opposite sides of the point's roles\r\n    pointLimits.forEach(direction => {\r\n      const directionAxis = this.getDirectionAxis(direction);\r\n      if (direction === 'top' || direction === 'left') {\r\n        if (positionChange[directionAxis] < this._limits[direction]) {\r\n          limitException.resetCoefficients[directionAxis] = 1;\r\n          limitException.resetCoordinates[directionAxis] = this._limits[direction];\r\n        }\r\n      } else if (direction === 'right' || direction === 'bottom') {\r\n        if (positionChange[directionAxis] > this._limits[direction]) {\r\n          limitException.resetCoefficients[directionAxis] = -1;\r\n          limitException.resetCoordinates[directionAxis] = this._limits[direction];\r\n        }\r\n      }\r\n    });\r\n\r\n    if (limitException.resetCoefficients.x !== 0 || limitException.resetCoefficients.y !== 0) {\r\n      limitException.exceeds = true;\r\n    }\r\n\r\n    return limitException;\r\n  }\r\n\r\n  /**\r\n   * rotate crop tool points clockwise\r\n   * @param resizeRatios - ratio between the new dimensions and the previous\r\n   * @param initialPreviewDimensions - preview pane dimensions before rotation\r\n   * @param initialPositions - current positions before rotation\r\n   */\r\n  public rotateClockwise(resizeRatios, initialPreviewDimensions, initialPositions: Array<PointPositionChange>) {\r\n    // convert positions to ratio between position to initial pane dimension\r\n    initialPositions = initialPositions.map(point => {\r\n      return new PositionChangeData({\r\n        x: point.x / initialPreviewDimensions.width,\r\n        y: point.y / initialPreviewDimensions.height,\r\n      }, point.roles);\r\n    });\r\n    this.repositionPoints(initialPositions.map(point => {\r\n      return this.rotateCornerClockwise(point);\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * returns the corner positions after a 90 degrees clockwise rotation\r\n   */\r\n  private rotateCornerClockwise(corner: PointPositionChange): PointPositionChange {\r\n    const rotated: PointPositionChange = {\r\n      x: this._paneDimensions.width * (1 - corner.y),\r\n      y: this._paneDimensions.height * corner.x,\r\n      roles: []\r\n    };\r\n    // rotates corner according to order\r\n    const order: Array<RolesArray> = [\r\n      ['bottom', 'left'],\r\n      ['top', 'left'],\r\n      ['top', 'right'],\r\n      ['bottom', 'right'],\r\n      ['bottom', 'left']\r\n    ];\r\n    rotated.roles = order[order.findIndex(roles => {\r\n      return this.compareArray(roles, corner.roles);\r\n    }) + 1];\r\n    return rotated;\r\n  }\r\n\r\n  /**\r\n   * checks if two array contain the same values\r\n   * @param array1 - array 1\r\n   * @param array2 - array 2\r\n   * @returns boolean\r\n   */\r\n  public compareArray(array1: Array<string>, array2: Array<string>): boolean {\r\n    return array1.every((element) => {\r\n      return array2.includes(element);\r\n    }) && array1.length === array2.length;\r\n  }\r\n\r\n  private getDirectionAxis(direction) {\r\n    return {\r\n      left: 'x',\r\n      right: 'x',\r\n      top: 'y',\r\n      bottom: 'y'\r\n    }[direction];\r\n  }\r\n}\r\n\r\n\r\nexport interface PointPositionChange {\r\n  x: number;\r\n  y: number;\r\n  roles: RolesArray;\r\n}\r\n\r\nexport interface AreaLimits {\r\n  top: number;\r\n  bottom: number;\r\n  right: number;\r\n  left: number;\r\n}\r\n\r\nexport type RolesArray = Array<Direction>;\r\n\r\nexport class PositionChangeData implements PointPositionChange {\r\n  x: number;\r\n  y: number;\r\n  roles: RolesArray;\r\n\r\n  constructor(position: XYPosition, roles: RolesArray) {\r\n    this.x = position.x;\r\n    this.y = position.y;\r\n    this.roles = roles;\r\n  }\r\n}\r\n\r\nexport type Direction = 'left' | 'right' | 'top' | 'bottom';\r\n","import {AfterViewInit, Component, Input} from '@angular/core';\r\nimport {LimitsService, PointPositionChange, PositionChangeData} from '../../services/limits.service';\r\nimport {ImageDimensions} from '../../PublicModels';\r\nimport {LimitException, XYPosition} from '../../PrivateModels';\r\n\r\n@Component({\r\n  selector: 'ngx-draggable-point',\r\n  templateUrl: './ngx-draggable-point.component.html',\r\n})\r\nexport class NgxDraggablePointComponent implements AfterViewInit {\r\n  @Input() width = 10;\r\n  @Input() height = 10;\r\n  @Input() color = '#3cabe2';\r\n  @Input() shape: 'rect' | 'circle' = 'rect';\r\n  @Input() pointOptions: 'rect' | 'circle' = 'rect';\r\n  @Input() limitRoles: Array<'left'|'right'|'top'|'bottom'>;\r\n  @Input() startPosition: XYPosition;\r\n  @Input() container: HTMLElement;\r\n  @Input() private _currentPosition: XYPosition;\r\n  position: XYPosition = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  private _paneDimensions: ImageDimensions;\r\n  resetPosition: XYPosition;\r\n\r\n  constructor(private limitsService: LimitsService) {}\r\n\r\n  ngAfterViewInit() {\r\n    Object.keys(this.pointOptions).forEach(key => {\r\n      this[key] = this.pointOptions[key];\r\n    });\r\n    // subscribe to pane dimensions changes\r\n    this.limitsService.paneDimensions.subscribe(dimensions => {\r\n      if (dimensions.width > 0 && dimensions.width > 0) {\r\n        this._paneDimensions = {\r\n          width: dimensions.width,\r\n          height: dimensions.height\r\n        };\r\n        this.position = this.getInitialPosition(dimensions);\r\n        this.limitsService.positionChange(new PositionChangeData(this.position, this.limitRoles));\r\n      }\r\n    });\r\n    // subscribe to external reposition events\r\n    this.limitsService.repositionEvent.subscribe(positions => {\r\n      if (positions.length > 0) {\r\n        this.externalReposition(positions);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * returns a css style object for the point\r\n   */\r\n  pointStyle() {\r\n    return {\r\n      width: this.width + 'px',\r\n      height: this.height + 'px',\r\n      'background-color': this.color,\r\n      'border-radius': this.shape === 'circle' ? '100%' : 0,\r\n      position: 'absolute'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * registers a position change on the limits service, and adjusts position if necessary\r\n   * @param position - the current position of the point\r\n   */\r\n  positionChange(position: XYPosition) {\r\n    const positionChangeData = new PositionChangeData(position, this.limitRoles);\r\n    const limitException = this.limitsService.exceedsLimit(positionChangeData);\r\n    if (limitException.exceeds) {\r\n      // if exceeds limits, reposition\r\n      this.resetPosition = limitException.resetCoordinates;\r\n    } else {\r\n      this.limitsService.positionChange(positionChangeData);\r\n      this._currentPosition = position;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * adjusts the position of the point after a limit exception\r\n   */\r\n  private adjustPosition(limitException: LimitException) {\r\n    const newPosition = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n    Object.keys(this.startPosition).forEach(axis => {\r\n      newPosition[axis] = limitException.resetCoordinates[axis] + limitException.resetCoefficients[axis];\r\n    });\r\n    this.position = newPosition;\r\n    this.limitsService.positionChange(new PositionChangeData(this.position, this.limitRoles));\r\n  }\r\n\r\n  /**\r\n   * called on movement end, checks if last position exceeded the limits ad adjusts\r\n   */\r\n  movementEnd(position: XYPosition) {\r\n    let positionChangeData = new PositionChangeData(position, this.limitRoles);\r\n    const limitException = this.limitsService.exceedsLimit(positionChangeData);\r\n    if (limitException.exceeds) {\r\n      this.resetPosition = limitException.resetCoordinates;\r\n      if (limitException.exceeds) {\r\n        this.adjustPosition(limitException);\r\n        positionChangeData = new PositionChangeData(this.position, this.limitRoles);\r\n        this.limitsService.updatePosition(positionChangeData);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * calculates the initial positions of the point by it's roles\r\n   * @param dimensions - dimensions of the pane in which the point is located\r\n   */\r\n  private getInitialPosition(dimensions: ImageDimensions) {\r\n    return {\r\n      x: this.limitRoles.includes('left') ? 0 : dimensions.width - this.width / 2,\r\n      y: this.limitRoles.includes('top') ? 0 : dimensions.height - this.height / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * repositions the point after an external reposition event\r\n   * @param positions - an array of all points on the pane\r\n   */\r\n  private externalReposition(positions: Array<PointPositionChange>) {\r\n    positions.forEach(position => {\r\n      if (this.limitsService.compareArray(this.limitRoles, position.roles)) {\r\n        position = this.enforcePaneLimits(position);\r\n        this.position = {\r\n          x: position.x,\r\n          y: position.y\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * returns a new point position if the movement exceeded the pane limit\r\n   */\r\n  private enforcePaneLimits(position: PointPositionChange): PointPositionChange {\r\n    if (this._paneDimensions.width === 0 || this._paneDimensions.height === 0) {\r\n      return position;\r\n    } else {\r\n      if (position.x > this._paneDimensions.width) { position.x = this._paneDimensions.width; }\r\n      if (position.x < 0) { position.x = 1; }\r\n      if (position.y > this._paneDimensions.height) { position.y = this._paneDimensions.height; }\r\n      if (position.y < 0) { position.y = 1; }\r\n    }\r\n    return position;\r\n  }\r\n}\r\n\r\n","import {Component, EventEmitter, Inject, Output} from '@angular/core';\r\nimport {EditorActionButton} from '../../PrivateModels';\r\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef} from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'ngx-filter-menu',\r\n  templateUrl: './ngx-filter-menu.component.html',\r\n})\r\nexport class NgxFilterMenuComponent {\r\n  filterOptions: Array<EditorActionButton> = [\r\n    {\r\n      name: 'default',\r\n      icon: 'filter_b_and_w',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'B&W'\r\n    },\r\n    {\r\n      name: 'bw2',\r\n      icon: 'filter_b_and_w',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'B&W 2'\r\n    },\r\n    {\r\n      name: 'bw3',\r\n      icon: 'blur_on',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'B&W 3'\r\n    },\r\n    {\r\n      name: 'magic_color',\r\n      icon: 'filter_vintage',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'Magic Color'\r\n    },\r\n    {\r\n      name: 'original',\r\n      icon: 'crop_original',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'Original'\r\n    },\r\n  ];\r\n  @Output() filterSelected: EventEmitter<string> = new EventEmitter();\r\n  selectOption(optionName) {\r\n    this.data.filter = optionName;\r\n    this.bottomSheetRef.dismiss();\r\n  }\r\n\r\n  constructor(private bottomSheetRef: MatBottomSheetRef<NgxFilterMenuComponent>,\r\n              @Inject(MAT_BOTTOM_SHEET_DATA) public data: any\r\n              ) {}\r\n\r\n}\r\n","import {AfterViewInit, Component, Input, ViewChild} from '@angular/core';\r\nimport {LimitsService, PointPositionChange} from '../../services/limits.service';\r\nimport {ImageDimensions} from '../../PublicModels';\r\n\r\n@Component({\r\n  selector: 'ngx-shape-outine',\r\n  templateUrl: './ngx-shape-outline.component.html',\r\n})\r\nexport class NgxShapeOutlineComponent implements AfterViewInit {\r\n\r\n  @Input() color = '#3cabe2';\r\n  @Input() weight: number;\r\n  @Input() dimensions: ImageDimensions;\r\n  @ViewChild('outline') canvas;\r\n\r\n  private _points: Array<PointPositionChange>;\r\n  private _sortedPoints: Array<PointPositionChange>;\r\n  constructor(private limitsService: LimitsService) {}\r\n\r\n  ngAfterViewInit() {\r\n    // init drawing canvas dimensions\r\n    this.canvas.nativeElement.width = this.dimensions.width;\r\n    this.canvas.nativeElement.height = this.dimensions.height;\r\n    this.limitsService.positions.subscribe(positions => {\r\n      if (positions.length === 4) {\r\n        this._points = positions;\r\n        this.sortPoints();\r\n        this.clearCanvas();\r\n        this.drawShape();\r\n      }\r\n    });\r\n    // subscribe to changes in the pane's dimensions\r\n    this.limitsService.paneDimensions.subscribe(dimensions => {\r\n      this.clearCanvas();\r\n      this.canvas.nativeElement.width = dimensions.width;\r\n      this.canvas.nativeElement.height = dimensions.height;\r\n    });\r\n    // subscribe to reposition events\r\n    this.limitsService.repositionEvent.subscribe( positions => {\r\n      if (positions.length === 4) {\r\n        setTimeout( () => {\r\n          this.clearCanvas();\r\n          this.sortPoints();\r\n          this.drawShape();\r\n        }, 10);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * clears the shape canvas\r\n   */\r\n  private clearCanvas() {\r\n    const canvas = this.canvas.nativeElement;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, this.dimensions.width, this.dimensions.height);\r\n  }\r\n\r\n  /**\r\n   * sorts the array of points according to their clockwise alignment\r\n   */\r\n  private sortPoints() {\r\n    const _points = Array.from(this._points);\r\n    const sortedPoints = [];\r\n\r\n    const sortOrder = {\r\n      vertical: ['top', 'top', 'bottom', 'bottom'],\r\n      horizontal: ['left', 'right', 'right', 'left']\r\n    };\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      const roles = Array.from([sortOrder.vertical[i], sortOrder.horizontal[i]]);\r\n      sortedPoints.push(_points.filter((point) => {\r\n        return this.limitsService.compareArray(point.roles, roles);\r\n      })[0]);\r\n\r\n    }\r\n    this._sortedPoints = sortedPoints;\r\n  }\r\n\r\n  /**\r\n   * draws a line between the points according to their order\r\n   */\r\n  private drawShape() {\r\n    const canvas = this.canvas.nativeElement;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.lineWidth = this.weight;\r\n    ctx.strokeStyle = this.color;\r\n    ctx.beginPath();\r\n    this._sortedPoints.forEach((point, index) => {\r\n      if (index === 0) {\r\n        ctx.moveTo(point.x, point.y);\r\n      }\r\n      if (index !== this._sortedPoints.length - 1) {\r\n        const nextPoint = this._sortedPoints[index + 1];\r\n        ctx.lineTo(nextPoint.x, nextPoint.y);\r\n      } else {\r\n        ctx.closePath();\r\n      }\r\n    });\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\n\r\n","import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {LimitsService, PointPositionChange, PositionChangeData, RolesArray} from '../../services/limits.service';\r\nimport {MatBottomSheet} from '@angular/material';\r\nimport {NgxFilterMenuComponent} from '../filter-menu/ngx-filter-menu.component';\r\nimport {PointShape} from '../../PrivateModels';\r\n// import {NgxOpenCVService} from '../../services/ngx-opencv.service';\r\nimport {ImageDimensions, DocScannerConfig, OpenCVState} from '../../PublicModels';\r\nimport {EditorActionButton, PointOptions} from '../../PrivateModels';\r\nimport {NgxOpenCVService} from 'ngx-opencv';\r\n\r\ndeclare var cv: any;\r\n\r\n@Component({\r\n  selector: 'ngx-doc-scanner',\r\n  templateUrl: './ngx-doc-scanner.component.html',\r\n  styleUrls: ['./ngx-doc-scanner.component.scss']\r\n})\r\nexport class NgxDocScannerComponent implements OnInit {\r\n  /**\r\n   * editor config object\r\n   */\r\n  options: ImageEditorConfig;\r\n  // ************* //\r\n  // EDITOR CONFIG //\r\n  // ************* //\r\n  /**\r\n   * an array of action buttons displayed on the editor screen\r\n   */\r\n  private editorButtons: Array<EditorActionButton> = [\r\n    {\r\n      name: 'exit',\r\n      action: () => {\r\n        this.exitEditor.emit('canceled');\r\n      },\r\n      icon: 'arrow_back',\r\n      type: 'fab',\r\n      mode: 'crop'\r\n    },\r\n    {\r\n      name: 'rotate',\r\n      action: this.rotateImage.bind(this),\r\n      icon: 'rotate_right',\r\n      type: 'fab',\r\n      mode: 'crop'\r\n    },\r\n    {\r\n      name: 'done_crop',\r\n      action: async () => {\r\n        this.mode = 'color';\r\n        await this.transform();\r\n        await this.applyFilter(true);\r\n      },\r\n      icon: 'done',\r\n      type: 'fab',\r\n      mode: 'crop'\r\n    },\r\n    {\r\n      name: 'back',\r\n      action: () => {\r\n        this.mode = 'crop';\r\n        this.loadFile(this.originalImage);\r\n      },\r\n      icon: 'arrow_back',\r\n      type: 'fab',\r\n      mode: 'color'\r\n    },\r\n    {\r\n      name: 'filter',\r\n      action: () => {\r\n        return this.chooseFilters();\r\n      },\r\n      icon: 'photo_filter',\r\n      type: 'fab',\r\n      mode: 'color'\r\n    },\r\n    {\r\n      name: 'upload',\r\n      action: this.exportImage.bind(this),\r\n      icon: 'cloud_upload',\r\n      type: 'fab',\r\n      mode: 'color'\r\n    },\r\n  ];\r\n  /**\r\n   * returns an array of buttons according to the editor mode\r\n   */\r\n  get displayedButtons() {\r\n    return this.editorButtons.filter(button => {\r\n      return button.mode === this.mode;\r\n    });\r\n  }\r\n  /**\r\n   * max width of the preview area\r\n   */\r\n  private maxPreviewWidth: number;\r\n  /**\r\n   * dimensions of the image container\r\n   */\r\n  imageDivStyle: {[key: string]: string|number};\r\n  /**\r\n   * editor div style\r\n   */\r\n  editorStyle: {[key: string]: string|number};\r\n\r\n  // ************* //\r\n  // EDITOR STATE //\r\n  // ************* //\r\n  /**\r\n   * state of opencv loading\r\n   */\r\n  private cvState: string;\r\n  /**\r\n   * true after the image is loaded and preview is displayed\r\n   */\r\n  imageLoaded = false;\r\n  /**\r\n   * editor mode\r\n   */\r\n  mode: 'crop'|'color' = 'crop';\r\n  /**\r\n   * filter selected by the user, returned by the filter selector bottom sheet\r\n   */\r\n  private selectedFilter = 'default';\r\n\r\n  // ******************* //\r\n  // OPERATION VARIABLES //\r\n  // ******************* //\r\n  /**\r\n   * viewport dimensions\r\n   */\r\n  private screenDimensions: ImageDimensions;\r\n  /**\r\n   * image dimensions\r\n   */\r\n  private imageDimensions: ImageDimensions = {\r\n    width: 0,\r\n    height: 0\r\n  };\r\n  /**\r\n   * dimensions of the preview pane\r\n   */\r\n  previewDimensions: ImageDimensions;\r\n  /**\r\n   * ration between preview image and original\r\n   */\r\n  private imageResizeRatio: number;\r\n  /**\r\n   * stores the original image for reset purposes\r\n   */\r\n  private originalImage: File;\r\n  /**\r\n   * stores the edited image\r\n   */\r\n  private editedImage: HTMLCanvasElement;\r\n  /**\r\n   * stores the preview image as canvas\r\n   */\r\n  @ViewChild('PreviewCanvas', {read: ElementRef}) private previewCanvas: ElementRef;\r\n  /**\r\n   * an array of points used by the crop tool\r\n   */\r\n  private points: Array<PointPositionChange>;\r\n\r\n  // ************** //\r\n  // EVENT EMITTERS //\r\n  // ************** //\r\n  /**\r\n   * optional binding to the exit button of the editor\r\n   */\r\n  @Output() exitEditor: EventEmitter<string> = new EventEmitter<string>();\r\n  /**\r\n   * fires on edit completion\r\n   */\r\n  @Output() editResult: EventEmitter<Blob> = new EventEmitter<Blob>();\r\n  /**\r\n   * emits errors, can be linked to an error handler of choice\r\n   */\r\n  @Output() error: EventEmitter<any> = new EventEmitter<any>();\r\n  /**\r\n   * emits the loading status of the cv module.\r\n   */\r\n  @Output() ready: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  /**\r\n   * emits true when processing is done, false when completed\r\n   */\r\n  @Output() processing: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  // ****** //\r\n  // INPUTS //\r\n  // ****** //\r\n  /**\r\n   * set image for editing\r\n   * @param file - file from form input\r\n   */\r\n  @Input() set file(file: File) {\r\n    if (file) {\r\n      setTimeout(() => {\r\n        this.processing.emit(true);\r\n      }, 5);\r\n      this.imageLoaded = false;\r\n      this.originalImage = file;\r\n      this.ngxOpenCv.cvState.subscribe(\r\n        async (cvState: OpenCVState) => {\r\n          if (cvState.ready) {\r\n            // read file to image & canvas\r\n            await this.loadFile(file);\r\n            this.processing.emit(false);\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * editor configuration object\r\n   */\r\n  @Input() config: DocScannerConfig;\r\n\r\n\r\n  constructor(private ngxOpenCv: NgxOpenCVService, private limitsService: LimitsService, private bottomSheet: MatBottomSheet) {\r\n    this.screenDimensions = {\r\n      width: window.innerWidth,\r\n      height: window.innerHeight\r\n    };\r\n\r\n    // subscribe to status of cv module\r\n    this.ngxOpenCv.cvState.subscribe((cvState: OpenCVState) => {\r\n      this.cvState = cvState.state;\r\n      this.ready.emit(cvState.ready);\r\n      if (cvState.error) {\r\n        this.error.emit(new Error('error loading cv'));\r\n      } else if (cvState.loading) {\r\n        this.processing.emit(true);\r\n      } else if (cvState.ready) {\r\n        this.processing.emit(false);\r\n      }\r\n    });\r\n\r\n    // subscribe to positions of crop tool\r\n    this.limitsService.positions.subscribe(points => {\r\n      this.points = points;\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    // set options from config object\r\n    this.options = new ImageEditorConfig(this.config);\r\n    // set export image icon\r\n    this.editorButtons.forEach(button => {\r\n      if (button.name === 'upload') {\r\n        button.icon = this.options.exportImageIcon;\r\n      }\r\n    });\r\n    this.maxPreviewWidth = this.options.maxPreviewWidth;\r\n    this.editorStyle = this.options.editorStyle;\r\n  }\r\n\r\n  // ***************************** //\r\n  // editor action buttons methods //\r\n  // ***************************** //\r\n\r\n  /**\r\n   * emits the exitEditor event\r\n   */\r\n  exit() {\r\n    this.exitEditor.emit('canceled');\r\n  }\r\n\r\n  /**\r\n   * applies the selected filter, and when done emits the resulted image\r\n   */\r\n  private async exportImage() {\r\n    await this.applyFilter(false);\r\n    if (this.options.maxImageDimensions) {\r\n      this.resize(this.editedImage)\r\n        .then(resizeResult => {\r\n          resizeResult.toBlob((blob) => {\r\n            this.editResult.emit(blob);\r\n            this.processing.emit(false);\r\n          }, this.originalImage.type);\r\n        });\r\n    } else {\r\n      this.editedImage.toBlob((blob) => {\r\n        this.editResult.emit(blob);\r\n        this.processing.emit(false);\r\n      }, this.originalImage.type);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * open the bottom sheet for selecting filters, and applies the selected filter in preview mode\r\n   */\r\n  private chooseFilters() {\r\n    const data = { filter: this.selectedFilter };\r\n    const bottomSheetRef = this.bottomSheet.open(NgxFilterMenuComponent, {\r\n      data: data\r\n    });\r\n    bottomSheetRef.afterDismissed().subscribe(() => {\r\n      this.selectedFilter = data.filter;\r\n      this.applyFilter(true);\r\n    });\r\n\r\n  }\r\n\r\n  // *************************** //\r\n  // File Input & Output Methods //\r\n  // *************************** //\r\n  /**\r\n   * load image from input field\r\n   */\r\n  private loadFile(file: File) {\r\n    return new Promise(async (resolve, reject) => {\r\n      this.processing.emit(true);\r\n      try {\r\n        await this.readImage(file);\r\n      } catch (err) {\r\n        console.error(err);\r\n        this.error.emit(new Error(err));\r\n      }\r\n      try {\r\n        await this.showPreview();\r\n      } catch (err) {\r\n        console.error(err);\r\n        this.error.emit(new Error(err));\r\n      }\r\n      // set pane limits\r\n      // show points\r\n      this.imageLoaded = true;\r\n      await this.limitsService.setPaneDimensions({width: this.previewDimensions.width, height: this.previewDimensions.height});\r\n      setTimeout(async () => {\r\n        await this.detectContours();\r\n        this.processing.emit(false);\r\n        resolve();\r\n      }, 15);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * read image from File object\r\n   */\r\n  private readImage(file: File) {\r\n    return new Promise(async (resolve, reject) => {\r\n      let imageSrc;\r\n      try {\r\n        imageSrc = await readFile();\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n      const img = new Image();\r\n      img.onload = async () => {\r\n        // set edited image canvas and dimensions\r\n        this.editedImage = <HTMLCanvasElement> document.createElement('canvas');\r\n        this.editedImage.width = img.width;\r\n        this.editedImage.height = img.height;\r\n        const ctx = this.editedImage.getContext('2d');\r\n        ctx.drawImage(img, 0, 0);\r\n        // resize image if larger than max image size\r\n        const width = img.width > img.height ? img.height : img.width;\r\n        if (width > this.options.maxImageDimensions.width) {\r\n          this.editedImage = await this.resize(this.editedImage);\r\n        }\r\n        this.imageDimensions.width = this.editedImage.width;\r\n        this.imageDimensions.height = this.editedImage.height;\r\n        this.setPreviewPaneDimensions(this.editedImage);\r\n        resolve();\r\n      };\r\n      img.src = imageSrc;\r\n    });\r\n\r\n    /**\r\n     * read file from input field\r\n     */\r\n    function readFile() {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (event) => {\r\n          resolve(reader.result);\r\n        };\r\n        reader.onerror = (err) => {\r\n          reject(err);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    }\r\n  }\r\n\r\n  // ************************ //\r\n  // Image Processing Methods //\r\n  // ************************ //\r\n  /**\r\n   * rotate image 90 degrees\r\n   */\r\n  private rotateImage() {\r\n    return new Promise((resolve, reject) => {\r\n      this.processing.emit(true);\r\n      setTimeout(() => {\r\n        const dst = cv.imread(this.editedImage);\r\n        // const dst = new cv.Mat();\r\n        cv.transpose(dst, dst);\r\n        cv.flip(dst, dst, 1);\r\n        cv.imshow(this.editedImage, dst);\r\n        // src.delete();\r\n        dst.delete();\r\n        // save current preview dimensions and positions\r\n        const initialPreviewDimensions = {width: 0, height: 0};\r\n        Object.assign(initialPreviewDimensions, this.previewDimensions);\r\n        const initialPositions = Array.from(this.points);\r\n        // get new dimensions\r\n        // set new preview pane dimensions\r\n        this.setPreviewPaneDimensions(this.editedImage);\r\n        // get preview pane resize ratio\r\n        const previewResizeRatios = {\r\n          width: this.previewDimensions.width / initialPreviewDimensions.width,\r\n          height: this.previewDimensions.height / initialPreviewDimensions.height\r\n        };\r\n        // set new preview pane dimensions\r\n\r\n        this.limitsService.rotateClockwise(previewResizeRatios, initialPreviewDimensions, initialPositions);\r\n        this.showPreview().then(() => {\r\n          this.processing.emit(false);\r\n          resolve();\r\n        });\r\n      }, 30);\r\n    });\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * detects the contours of the document and\r\n   **/\r\n  private detectContours(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.processing.emit(true);\r\n      setTimeout(() => {\r\n        // load the image and compute the ratio of the old height to the new height, clone it, and resize it\r\n        const processingResizeRatio = 0.5;\r\n        const dst = cv.imread(this.editedImage);\r\n        const dsize = new cv.Size(dst.rows * processingResizeRatio, dst.cols * processingResizeRatio);\r\n        const ksize = new cv.Size(5, 5);\r\n        // convert the image to grayscale, blur it, and find edges in the image\r\n        cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\r\n        cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\r\n        cv.Canny(dst, dst, 75, 200);\r\n        // find contours\r\n        cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY);\r\n        const contours = new cv.MatVector();\r\n        const hierarchy = new cv.Mat();\r\n        cv.findContours(dst, contours, hierarchy, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE);\r\n        const rect = cv.boundingRect(dst);\r\n        dst.delete(); hierarchy.delete(); contours.delete();\r\n        // transform the rectangle into a set of points\r\n        Object.keys(rect).forEach(key => {\r\n          rect[key] = rect[key]  * this.imageResizeRatio;\r\n        });\r\n\r\n        const contourCoordinates = [\r\n          new PositionChangeData({x: rect.x, y: rect.y}, ['left', 'top']),\r\n          new PositionChangeData({x: rect.x + rect.width, y: rect.y}, ['right', 'top']),\r\n          new PositionChangeData({x: rect.x + rect.width, y: rect.y + rect.height}, ['right', 'bottom']),\r\n          new PositionChangeData({x: rect.x, y: rect.y + rect.height}, ['left', 'bottom']),\r\n        ];\r\n\r\n        this.limitsService.repositionPoints(contourCoordinates);\r\n        // this.processing.emit(false);\r\n        resolve();\r\n      }, 30);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * apply perspective transform\r\n   */\r\n  private transform(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.processing.emit(true);\r\n      setTimeout(() => {\r\n        const dst = cv.imread(this.editedImage);\r\n\r\n        // create source coordinates matrix\r\n        const sourceCoordinates = [\r\n          this.getPoint(['top', 'left']),\r\n          this.getPoint(['top', 'right']),\r\n          this.getPoint(['bottom', 'right']),\r\n          this.getPoint(['bottom', 'left'])\r\n        ].map(point => {\r\n          return [point.x / this.imageResizeRatio, point.y / this.imageResizeRatio];\r\n        });\r\n\r\n        // get max width\r\n        const bottomWidth = this.getPoint(['bottom', 'right']).x - this.getPoint(['bottom', 'left']).x;\r\n        const topWidth = this.getPoint(['top', 'right']).x - this.getPoint(['top', 'left']).x;\r\n        const maxWidth = Math.max(bottomWidth, topWidth) / this.imageResizeRatio;\r\n        // get max height\r\n        const leftHeight = this.getPoint(['bottom', 'left']).y - this.getPoint(['top', 'left']).y;\r\n        const rightHeight = this.getPoint(['bottom', 'right']).y - this.getPoint(['top', 'right']).y;\r\n        const maxHeight = Math.max(leftHeight, rightHeight) / this.imageResizeRatio;\r\n        // create dest coordinates matrix\r\n        const destCoordinates = [\r\n          [0, 0],\r\n          [maxWidth - 1, 0],\r\n          [maxWidth - 1, maxHeight - 1],\r\n          [0, maxHeight - 1]\r\n        ];\r\n\r\n        // convert to open cv matrix objects\r\n        const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...sourceCoordinates));\r\n        const Md = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...destCoordinates));\r\n        const transformMatrix = cv.getPerspectiveTransform(Ms, Md);\r\n        // set new image size\r\n        const dsize = new cv.Size(maxWidth, maxHeight);\r\n        // perform warp\r\n        cv.warpPerspective(dst, dst, transformMatrix, dsize, cv.INTER_LINEAR, cv.BORDER_CONSTANT, new cv.Scalar());\r\n        cv.imshow(this.editedImage, dst);\r\n\r\n        dst.delete(); Ms.delete(); Md.delete(); transformMatrix.delete();\r\n\r\n        this.setPreviewPaneDimensions(this.editedImage);\r\n        this.showPreview().then(() => {\r\n          this.processing.emit(false);\r\n          resolve();\r\n        });\r\n      }, 30);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * applies the selected filter to the image\r\n   * @param preview - when true, will not apply the filter to the edited image but only display a preview.\r\n   * when false, will apply to editedImage\r\n   */\r\n  private applyFilter(preview: boolean): Promise<void> {\r\n    return new Promise(async (resolve, reject) => {\r\n      this.processing.emit(true);\r\n      // default options\r\n      const options = {\r\n        blur: false,\r\n        th: true,\r\n        thMode: cv.ADAPTIVE_THRESH_MEAN_C,\r\n        thMeanCorrection: 10,\r\n        thBlockSize: 25,\r\n        thMax: 255,\r\n        grayScale: true,\r\n      };\r\n      const dst = cv.imread(this.editedImage);\r\n\r\n      switch (this.selectedFilter) {\r\n        case 'original':\r\n          options.th = false;\r\n          options.grayScale = false;\r\n          options.blur = false;\r\n          break;\r\n        case 'magic_color':\r\n          options.grayScale = false;\r\n          break;\r\n        case 'bw2':\r\n          options.thMode = cv.ADAPTIVE_THRESH_GAUSSIAN_C;\r\n          options.thMeanCorrection = 15;\r\n          options.thBlockSize = 15;\r\n          break;\r\n        case 'bw3':\r\n          options.blur = true;\r\n          options.thMeanCorrection = 15;\r\n          break;\r\n      }\r\n\r\n      setTimeout(async () => {\r\n        if (options.grayScale) {\r\n          cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\r\n        }\r\n        if (options.blur) {\r\n          const ksize = new cv.Size(5, 5);\r\n          cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\r\n        }\r\n        if (options.th) {\r\n          if (options.grayScale) {\r\n            cv.adaptiveThreshold(dst, dst, options.thMax, options.thMode, cv.THRESH_BINARY, options.thBlockSize, options.thMeanCorrection);\r\n          } else {\r\n            dst.convertTo(dst, -1, 1, 60);\r\n            cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY);\r\n          }\r\n        }\r\n        if (!preview) {\r\n          cv.imshow(this.editedImage, dst);\r\n        }\r\n        await this.showPreview(dst);\r\n        this.processing.emit(false);\r\n        resolve();\r\n      }, 30);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * resize an image to fit constraints set in options.maxImageDimensions\r\n   */\r\n  private resize(image: HTMLCanvasElement): Promise<HTMLCanvasElement> {\r\n    return new Promise((resolve, reject) => {\r\n      this.processing.emit(true);\r\n      setTimeout(() => {\r\n        const src = cv.imread(image);\r\n        const currentDimensions = {\r\n          width: src.size().width,\r\n          height: src.size().height\r\n        };\r\n        const resizeDimensions = {\r\n          width: 0,\r\n          height: 0\r\n        };\r\n        if (currentDimensions.width > this.options.maxImageDimensions.width) {\r\n          resizeDimensions.width = this.options.maxImageDimensions.width;\r\n          resizeDimensions.height = this.options.maxImageDimensions.width / currentDimensions.width * currentDimensions.height;\r\n          if (resizeDimensions.height > this.options.maxImageDimensions.height) {\r\n            resizeDimensions.height = this.options.maxImageDimensions.height;\r\n            resizeDimensions.width = this.options.maxImageDimensions.height / currentDimensions.height * currentDimensions.width;\r\n          }\r\n          const dsize = new cv.Size(Math.floor(resizeDimensions.width), Math.floor(resizeDimensions.height));\r\n          cv.resize(src, src, dsize, 0, 0, cv.INTER_AREA);\r\n          const resizeResult = <HTMLCanvasElement> document.createElement('canvas');\r\n          cv.imshow(resizeResult, src);\r\n          src.delete();\r\n          this.processing.emit(false);\r\n          resolve(resizeResult);\r\n        } else {\r\n          this.processing.emit(false);\r\n          resolve(image);\r\n        }\r\n      }, 30);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * display a preview of the image on the preview canvas\r\n   */\r\n  private showPreview(image?: any) {\r\n    return new Promise((resolve, reject) => {\r\n      let src;\r\n      if (image) {\r\n        src = image;\r\n      } else {\r\n        src = cv.imread(this.editedImage);\r\n      }\r\n      const dst = new cv.Mat();\r\n      const dsize = new cv.Size(0, 0);\r\n      cv.resize(src, dst, dsize, this.imageResizeRatio, this.imageResizeRatio, cv.INTER_AREA);\r\n      cv.imshow(this.previewCanvas.nativeElement, dst);\r\n      src.delete();\r\n      dst.delete();\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  // *************** //\r\n  // Utility Methods //\r\n  // *************** //\r\n  /**\r\n   * set preview canvas dimensions according to the canvas element of the original image\r\n   */\r\n  private setPreviewPaneDimensions(img: HTMLCanvasElement) {\r\n    // set preview pane dimensions\r\n    this.previewDimensions = this.calculateDimensions(img.width, img.height);\r\n    this.previewCanvas.nativeElement.width = this.previewDimensions.width;\r\n    this.previewCanvas.nativeElement.height = this.previewDimensions.height;\r\n    this.imageResizeRatio = this.previewDimensions.width / img.width;\r\n    this.imageDivStyle = {\r\n      width: this.previewDimensions.width + this.options.cropToolDimensions.width + 'px',\r\n      height: this.previewDimensions.height + this.options.cropToolDimensions.height + 'px',\r\n      'margin-left': `calc((100% - ${this.previewDimensions.width + 10}px) / 2 + ${this.options.cropToolDimensions.width / 2}px)`,\r\n      'margin-right': `calc((100% - ${this.previewDimensions.width + 10}px) / 2 - ${this.options.cropToolDimensions.width / 2}px)`,\r\n    };\r\n    this.limitsService.setPaneDimensions({width: this.previewDimensions.width, height: this.previewDimensions.height});\r\n  }\r\n\r\n  /**\r\n   * calculate dimensions of the preview canvas\r\n   */\r\n  private calculateDimensions(width: number, height: number): { width: number; height: number; ratio: number} {\r\n    const ratio = width / height;\r\n\r\n    const maxWidth = this.screenDimensions.width > this.maxPreviewWidth ?\r\n      this.maxPreviewWidth : this.screenDimensions.width - 40;\r\n    const maxHeight = this.screenDimensions.height - 240;\r\n    const calculated = {\r\n      width: maxWidth,\r\n      height: Math.round(maxWidth / ratio),\r\n      ratio: ratio\r\n    };\r\n\r\n    if (calculated.height > maxHeight) {\r\n      calculated.height = maxHeight;\r\n      calculated.width = Math.round(maxHeight * ratio);\r\n    }\r\n    return calculated;\r\n  }\r\n\r\n  /**\r\n   * returns a point by it's roles\r\n   * @param roles - an array of roles by which the point will be fetched\r\n   */\r\n  private getPoint(roles: RolesArray) {\r\n    return this.points.find(point => {\r\n      return this.limitsService.compareArray(point.roles, roles);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * a class for generating configuration objects for the editor\r\n */\r\nclass ImageEditorConfig implements DocScannerConfig {\r\n  /**\r\n   * max dimensions of oputput image. if set to zero\r\n   */\r\n  maxImageDimensions: ImageDimensions = {\r\n    width: 800,\r\n    height: 1200\r\n  };\r\n  /**\r\n   * background color of the main editor div\r\n   */\r\n  editorBackgroundColor = '#fefefe';\r\n  /**\r\n   * css properties for the main editor div\r\n   */\r\n  editorDimensions: { width: string; height: string; } = {\r\n    width: '100vw',\r\n    height: '100vh'\r\n  };\r\n  /**\r\n   * css that will be added to the main div of the editor component\r\n   */\r\n  extraCss: {[key: string]: string|number} = {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0\r\n  };\r\n\r\n  /**\r\n   * material design theme color name\r\n   */\r\n  buttonThemeColor: 'primary'|'warn'|'accent' = 'accent';\r\n  /**\r\n   * icon for the button that completes the editing and emits the edited image\r\n   */\r\n  exportImageIcon = 'cloud_upload';\r\n  /**\r\n   * color of the crop tool\r\n   */\r\n  cropToolColor = '#3cabe2';\r\n  /**\r\n   * shape of the crop tool, can be either a rectangle or a circle\r\n   */\r\n  cropToolShape: PointShape = 'rect';\r\n  /**\r\n   * dimensions of the crop tool\r\n   */\r\n  cropToolDimensions: ImageDimensions = {\r\n    width: 10,\r\n    height: 10\r\n  };\r\n  /**\r\n   * aggregation of the properties regarding point attributes generated by the class constructor\r\n   */\r\n  pointOptions: PointOptions;\r\n  /**\r\n   * aggregation of the properties regarding the editor style generated by the class constructor\r\n   */\r\n  editorStyle?: {[key: string]: string|number};\r\n  /**\r\n   * crop tool outline width\r\n   */\r\n  cropToolLineWeight = 3;\r\n  /**\r\n   * maximum size of the preview pane\r\n   */\r\n  maxPreviewWidth = 800;\r\n\r\n  constructor(options: DocScannerConfig) {\r\n    if (options) {\r\n      Object.keys(options).forEach(key => {\r\n        this[key] = options[key];\r\n      });\r\n    }\r\n\r\n    this.editorStyle = {'background-color': this.editorBackgroundColor };\r\n    Object.assign(this.editorStyle, this.editorDimensions);\r\n    Object.assign(this.editorStyle, this.extraCss);\r\n\r\n    this.pointOptions = {\r\n      shape: this.cropToolShape,\r\n      color: this.cropToolColor,\r\n      width: 0,\r\n      height: 0\r\n    };\r\n    Object.assign(this.pointOptions, this.cropToolDimensions);\r\n  }\r\n}\r\n\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {NgxDraggablePointComponent} from './components/draggable-point/ngx-draggable-point.component';\r\nimport {NgxFilterMenuComponent} from './components/filter-menu/ngx-filter-menu.component';\r\nimport {NgxShapeOutlineComponent} from './components/shape-outline/ngx-shape-outline.component';\r\nimport {NgxDocScannerComponent} from './components/image-editor/ngx-doc-scanner.component';\r\nimport {LimitsService} from './services/limits.service';\r\nimport {FlexLayoutModule} from '@angular/flex-layout';\r\nimport {MatBottomSheetModule, MatButtonModule, MatIconModule, MatListModule} from '@angular/material';\r\nimport {AngularDraggableModule} from 'angular2-draggable';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OpenCVConfig} from './PublicModels';\r\nimport {NgxOpenCVModule} from 'ngx-opencv';\r\nimport {NgxOpenCVService, OpenCvConfigToken} from 'ngx-opencv';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgxDraggablePointComponent,\r\n    NgxFilterMenuComponent,\r\n    NgxShapeOutlineComponent,\r\n    NgxDocScannerComponent,\r\n  ],\r\n  imports: [\r\n    FlexLayoutModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatBottomSheetModule,\r\n    MatListModule,\r\n    AngularDraggableModule,\r\n    CommonModule,\r\n    NgxOpenCVModule,\r\n  ],\r\n  exports: [\r\n    NgxDocScannerComponent,\r\n  ],\r\n  entryComponents: [\r\n    NgxFilterMenuComponent,\r\n  ],\r\n  providers: [\r\n    NgxOpenCVService,\r\n    LimitsService,\r\n  ]\r\n})\r\nexport class NgxDocumentScannerModule {\r\n  static forRoot(config: OpenCVConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxDocumentScannerModule,\r\n      providers: [\r\n        { provide: OpenCvConfigToken, useValue: config },\r\n      ],\r\n    };\r\n  }\r\n}\r\n"]}