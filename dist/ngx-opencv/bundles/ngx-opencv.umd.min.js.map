{"version":3,"sources":["ng://ngx-opencv/lib/ngx-open-cv.service.ts","ng://ngx-opencv/lib/ngx-opencv.module.ts"],"names":["OpenCvConfigToken","InjectionToken","NgxOpenCvService","options","_ngZone","this","cvState","BehaviorSubject","ready","error","loading","state","configModule","generateConfigModule","loadOpenCv","prototype","_this","next","newState","window","script","document","createElement","setAttribute","addEventListener","err","Error","scriptUrl","passive","src","node","getElementsByTagName","parentNode","insertBefore","head","appendChild","change","newStateObj","Object","keys","forEach","key","openCVDirPath","wasmBinaryFile","usingWasm","onRuntimeInitialized","run","console","log","runOnOpenCVInit","Injectable","args","providedIn","Inject","NgZone","NgxOpencvModule","forRoot","config","ngModule","providers","provide","useValue","NgModule","declarations","imports","exports"],"mappings":"kSAIA,IAAaA,EAAoB,IAAIC,EAAAA,eAA6B,8BAElEC,EAAA,WAaE,SAAAA,EAAuCC,EAA+BC,GAAAC,KAAAD,QAAAA,EARtEC,KAAAC,QAAU,IAAIC,EAAAA,gBAA6B,CACzCC,OAAO,EACPC,OAAO,EACPC,SAAS,EACTC,MAAO,YAKFR,IACHA,EAAU,IAEZE,KAAKO,aAAeP,KAAKQ,qBAAqBV,GAC9CE,KAAKS,oBAMPZ,EAAAa,UAAAD,WAAA,WAAA,IAAAE,EAAAX,KACEA,KAAKC,QAAQW,KAAMZ,KAAKa,SAAS,YAEjCC,OAAe,OAAId,KAAKO,iBAGlBQ,EAA6BC,SAASC,cAAc,UAC1DF,EAAOG,aAAa,QAAS,IAC7BH,EAAOG,aAAa,OAAQ,mBAG5BH,EAAOI,iBAAiB,QAAS,eACzBC,EAAM,IAAIC,MAAM,kBAAoBV,EAAKJ,aAAae,WAC5DX,EAAKV,QAAQW,KAAKD,EAAKE,SAAS,UAChCF,EAAKV,QAAQG,MAAMgB,IAClB,CAACG,SAAS,IAGbR,EAAOS,IAAMxB,KAAKO,aAAae,cAEzBG,EAAOT,SAASU,qBAAqB,UAAU,GACjDD,EACFA,EAAKE,WAAWC,aAAab,EAAQU,GAErCT,SAASa,KAAKC,YAAYf,IAQtBlB,EAAAa,UAAAG,SAAR,SAAiBkB,OACTC,EAA2B,CAC/B7B,OAAO,EACPE,SAAS,EACTD,OAAO,EACPE,MAAO,IAYT,OAVA2B,OAAOC,KAAKF,GAAaG,QAAQ,SAAAC,GACnB,UAARA,IACEA,IAAQL,GACVC,EAAYI,IAAO,EACnBJ,EAAY1B,MAAQ8B,GAEpBJ,EAAYI,IAAO,KAIlBJ,GAODnC,EAAAa,UAAAF,qBAAR,SAA6BV,GAA7B,IAAAa,EAAAX,KACE,MAAO,CACLsB,UAAWxB,EAAQuC,cAAmBvC,EAAQuC,cAAa,aAAe,2BAC1EC,eAAgB,iBAChBC,WAAW,EACXC,qBAAsB,WACpB7B,EAAKZ,QAAQ0C,IAAI,WACfC,QAAQC,IAAI,gBACZhC,EAAKV,QAAQW,KAAKD,EAAKE,SAAS,UAC5Bf,EAAQ8C,iBACV9C,EAAQ8C,2CA1FnBC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,gFAYCC,EAAAA,OAAMF,KAAA,CAACnD,YAnBsBsD,EAAAA,+IAM5C,GCNAC,EAAA,WAKA,SAAAA,KAcA,OANSA,EAAAC,QAAP,SAAeC,GACb,MAAO,CACLC,SAAUH,EACVI,UAAW,CAAC,CAAEC,QAAS5D,EAAmB6D,SAAUJ,0BAXzDK,EAAAA,SAAQX,KAAA,CAAC,CACRY,aAAc,GACdC,QAAS,GAETC,QAAS,GACTN,UAAW,CAACzD,OASdqD,EAnBA","sourcesContent":["import {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {OpenCVConfig, OpenCVState} from './models';\r\n\r\nexport const OpenCvConfigToken = new InjectionToken<OpenCVConfig>('OpenCV config object token');\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxOpenCvService {\r\n\r\n  cvState = new BehaviorSubject<OpenCVState>({\r\n    ready: false,\r\n    error: false,\r\n    loading: true,\r\n    state: 'loading'\r\n  });\r\n  configModule: OpenCvConfigModule;\r\n\r\n  constructor(@Inject(OpenCvConfigToken) options: OpenCVConfig, private _ngZone: NgZone) {\r\n    if (!options) {\r\n      options = {};\r\n    }\r\n    this.configModule = this.generateConfigModule(options);\r\n    this.loadOpenCv();\r\n  }\r\n\r\n  /**\r\n   * load the OpenCV script\r\n   */\r\n  loadOpenCv() {\r\n    this.cvState.next( this.newState('loading'));\r\n    // create global module variable\r\n    window['Module'] = this.configModule;\r\n\r\n    // create script element and set attributes\r\n    const script = <HTMLScriptElement> document.createElement('script');\r\n    script.setAttribute('async', '');\r\n    script.setAttribute('type', 'text/javascript');\r\n\r\n    // listen for errors\r\n    script.addEventListener('error', () => {\r\n      const err = new Error('Failed to load ' + this.configModule.scriptUrl);\r\n      this.cvState.next(this.newState('error'));\r\n      this.cvState.error(err);\r\n    }, {passive: true});\r\n\r\n    // set script url\r\n    script.src = this.configModule.scriptUrl;\r\n    // insert script as first script tag\r\n    const node = document.getElementsByTagName('script')[0];\r\n    if (node) {\r\n      node.parentNode.insertBefore(script, node);\r\n    } else {\r\n      document.head.appendChild(script);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * generates a new state object\r\n   * @param change - the new state of the module\r\n   */\r\n  private newState(change: 'loading'|'ready'|'error'): OpenCVState {\r\n    const newStateObj: OpenCVState = {\r\n      ready: false,\r\n      loading: false,\r\n      error: false,\r\n      state: ''\r\n    };\r\n    Object.keys(newStateObj).forEach(key => {\r\n      if (key !== 'state') {\r\n        if (key === change) {\r\n          newStateObj[key] = true;\r\n          newStateObj.state = key;\r\n        } else {\r\n          newStateObj[key] = false;\r\n        }\r\n      }\r\n    });\r\n    return newStateObj;\r\n  }\r\n\r\n  /**\r\n   * generates a config module for the global Module object\r\n   * @param options - configuration options\r\n   */\r\n  private generateConfigModule(options: OpenCVConfig): OpenCvConfigModule {\r\n    return {\r\n      scriptUrl: options.openCVDirPath ? `${options.openCVDirPath}/opencv.js` : `/assets/opencv/opencv.js`,\r\n      wasmBinaryFile: 'opencv_js.wasm',\r\n      usingWasm: true,\r\n      onRuntimeInitialized: () => {\r\n        this._ngZone.run(() => {\r\n          console.log('openCV Ready');\r\n          this.cvState.next(this.newState('ready'));\r\n          if (options.runOnOpenCVInit) {\r\n            options.runOnOpenCVInit();\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * describes the global Module object that is used to initiate OpenCV.js\r\n */\r\ninterface OpenCvConfigModule {\r\n  scriptUrl: string;\r\n  wasmBinaryFile: string;\r\n  usingWasm: boolean;\r\n  onRuntimeInitialized: Function;\r\n}\r\n\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {OpenCVConfig} from './models';\nimport {NgxOpenCvService, OpenCvConfigToken} from './ngx-open-cv.service';\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: [],\n  providers: [NgxOpenCvService]\n})\nexport class NgxOpencvModule {\n  static forRoot(config: OpenCVConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxOpencvModule,\n      providers: [{ provide: OpenCvConfigToken, useValue: config }]\n    };\n  }\n}\n"]}